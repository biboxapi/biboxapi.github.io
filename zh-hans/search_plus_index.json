{"./":{"url":"./","title":"Bibox交易所 API","keywords":"","body":"Bibox Bibox交易所提供REST API 和 WebSocket API，便于投资者查看行情、快速交易。 https://www.bibox.com REST 请求路径 https://api.bibox.com WebSocket 请求路径 wss://push.bibox.com/ Copyright © bibox.com 2019 all right reserved，powered by GitbookUpdate Date: 2019-11-12 "},"restful_intro.html":{"url":"restful_intro.html","title":"Restful API 说明","keywords":"","body":"Restful API 说明 REST API 简介 Bibox为用户提供了一套全新的API，可以帮用户快速接入Bibox的交易系统，实现程序化交易。 通过API可以实现以下功能： 市场行情信息查询（K线、深度、实时成交ticker、24小时行情） 账户资产信息查询 下单、撤单操作 订单信息查询 REST API 请求路径 https://api.bibox.com REST API 签名 使用REST API进行交易、查询资产等操作，需要先申请apikey。 限速策略：对于同一个apikey，api请求限速30次/5秒；对于同一个ip，当一次api请求cmd个数超过15个时，会限速1次/1秒，cmd个数不超过15个不做限速。 申请apikey 登陆 https://www.bibox.com/ 账户信息 -> API 根据提示生成 apikey 和 secret，请秘密保存 设置apikey操作权限 登陆 https://www.bibox.com/ 账户信息 -> API -> 编辑 设置 apikey 权限 合法请求结构 基于安全考虑，除行情API 外的 API 请求都必须进行签名运算。一个合法的请求由以下几部分组成 apikey 您申请的 apikey。 请求方法体 即请求结构中的cmds，REST API支持批量请求，即cmds可包含多个方法体，每个方法体表示一次独立API请求，每个方法体都有一组用于定义 API 调用的必需参数和可选参数。可以在每个方法的说明中查看这些参数及其含义。 签名方法（SignatureMethod） 用户计算签名的基于哈希的协议，此处使用 HmacMD5。 签名 签名计算得出的值，用于确保签名有效和未被篡改。请一定注意：签名是对格式化后的cmds的值进行签名！ 例子 { \"cmds\": \"[{\\\"cmd\\\":\\\"transfer/assets\\\",\\\"body\\\":{\\\"select\\\":1}}]\", \"apikey\":\"5213595xxxxedca0809axxxxxaba7580xxxxxa6\", \"sign\":\"6a21e39e3f68b6fc2227c4074c7e6a6c\" //用您的apisecret签名cmds的结果 } 签名步骤 API 请求在通过 Internet 发送的过程中极有可能被篡改。为了确保请求未被更改，我们会要求用户在每个请求中带上签名（行情 API 除外），来校验参数或参数值在传输途中是否发生了更改。 规范要计算签名的请求 因为使用 HMAC 进行签名计算时，使用不同内容计算得到的结果会完全不同。所以在进行签名计算前，请先对请求进行规范化处理。下面以查询资产详情请求为例进行说明 { \"cmds\":[ { \"cmd\":\"transfer/assets\", \"body\":{ \"select\":1 } } ], \"apikey\":\"\", \"sign\":\"\" } 格式化cmds{ \"cmds\": \"[{\\\"cmd\\\":\\\"transfer/assets\\\",\\\"body\\\":{\\\"select\\\":1}}]\", //js用 JSON.stringify()进行格式化 \"apikey\":\"\", \"sign\":\"\" } 填写您申请的apikey{ \"cmds\": \"[{\\\"cmd\\\":\\\"transfer/assets\\\",\\\"body\\\":{\\\"select\\\":1}}]\", \"apikey\":\"5213595xxxxedca0809axxxxxaba7580xxxxxa6\", \"sign\":\"\" } 使用您申请的apisecret签名cmds{ \"cmds\": \"[{\\\"cmd\\\":\\\"transfer/assets\\\",\\\"body\\\":{\\\"select\\\":1}}]\", \"apikey\":\"5213595xxxxedca0809axxxxxaba7580xxxxxa6\", \"sign\":\"6a21e39e3f68b6fc2227c4074c7e6a6c\" } 计算签名，将以下两个参数传入加密哈希函数： 要进行签名计算的字符串 \"[{\\\"cmd\\\":\\\"transfer/assets\\\",\\\"body\\\":{\\\"select\\\":1}}]\" 进行签名的密钥（apisecret） bxxxxxxxxf1236222xxxxxxxxx6d5d76d5xxxxxxxxx 得到签名计算结果 6a21e39e3f68b6fc2227c4074c7e6a6c 完整签名例子 nodejs实现 let CryptoJS = require(\"crypto-js\"); let apikey = \"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\"; //your apikey let secret = \"1e01c22ff8c59e9d98d93423817303f098d93423\"; //your apikey secret let param = [ { \"cmd\": \"transfer/assets\", \"body\": { \"select\": 1 } } ]; let form = { \"cmds\": JSON.stringify(param), //格式化param \"apikey\": apikey, \"sign\": \"\" }; let sign = CryptoJS.HmacMD5(form.cmds, secret).toString();//签名cmds form.sign = sign; console.log(form) 输出 { \"cmds\":\"[{\\\"cmd\\\":\\\"transfer/assets\\\",\\\"body\\\":{\\\"select\\\":1}}]\", \"apikey\":\"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\", \"sign\":\"86e88a4bc8eedc795b453f121f5894ee\" } API请求、返回格式说明 Bibox REST API参数规范，支持批量请求，请务必认真阅读。 请求参数 需要apikey的请求格式 // Request { \"cmds\": JSON.stringify([ // 支持批量请求（cmd设置不同，用来区分返回结果） { \"cmd\": \"orderpending/trade\", // 下单 \"index\": 1234567, \"body\": { \"pair\": \"BIX_BTC\", ... //其他参数 } }, { \"cmd\": \"orderpending/cancelTrade\", // 撤单 \"body\": { \"orders_id\": 12345 } } ]), \"apikey\": \"**************\", // 您的apikey \"sign\": \"**************\" // 用您的apisecret签名(序列化后的)cmds的结果 } 不需要apikey的请求格式 // Request { \"cmds\": JSON.stringify([ // 支持批量请求（cmd设置不同，用来区分返回结果） { \"cmd\": \"api/ticker\", // 请求ticker \"body\": { \"pair\": \"BIX_BTC\" } }, { \"cmd\": \"api/depth\", // 请求深度 \"body\": { \"pair\": \"BIX_BTC\", \"size\": 10, } } ]) } 参数解释 字段 描述 cmds 请求参数封装格式, 数组类型, 使用时必须先序列化，数组中每个元素代表一次独立的API调用 cmd API接口名，请参考API Reference body cmd对应的请求参数，请参考API_Reference apikey 系统给您分配的 apikey sign 使用系统分配给您的 api secret 签名(格式化后的)cmds的结果 结果返回 请求成功返回 { \"result\":[ { \"cmd\":\"api/pairList\", \"result\":[ { \"id\":1, \"pair\":\"BIX_BTC\" }, { \"id\":2, \"pair\":\"ETH_BTC\" } ] } ] } 结果解释 字段 描述 cmd API接口名，请参考API Reference result(外) 批量请求的返回结果，不保证顺序一致性 result(里) 特定cmd接口对应的返回结果 请求失败返回 { \"error\":{ \"code\":\"1000\", \"msg\":\"something error\" } } 结果解释 字段 描述 code 错误码 msg 错误描述 批量请求返回 { \"result\":[ { //成功 \"cmd\":\"api/pairList\", \"result\":[ { \"id\":1, \"pair\":\"BIX_BTC\" }, { \"id\":2, \"pair\":\"ETH_BTC\" } ] }, { //失败 \"cmd\":\"api/depth\", \"error\":{ \"code\":\"1000\", \"msg\":\"something error\" } } ] } 请求示例 // Request let CryptoJS = require(\"crypto-js\"); let request = require(\"request\"); let url = \"https://api.bibox.com/v1/transfer\"; let apikey = \"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\"; //your apikey let secret = \"1e01c22ff8c59e9d98d93423817303f098d93423\"; //your apikey secret let param = [ { \"cmd\": \"transfer/assets\", \"body\": { \"select\": 1 } } ]; let form = { \"cmds\": JSON.stringify(param), //格式化param \"apikey\": apikey, \"sign\": \"\" }; let sign = CryptoJS.HmacMD5(form.cmds, secret).toString();//签名cmds form.sign = sign; console.log({url, form}) request.post({url, form }, (error, response, body) => { if (!error && response && response.statusCode === 200) { try { let result = JSON.parse(body); console.log(result) } catch (error) { console.log(error) } } else { console.log(error, response, body); } }); 请求参数 { \"url\":\"https://api.bibox.com/v1/transfer\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"transfer/assets\\\",\\\"body\\\":{\\\"select\\\":1}}]\", \"apikey\":\"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\", \"sign\":\"86e88a4bc8eedc795b453f121f5894ee\" } } 返回结果错误 // Response { \"error\":{ \"code\":\"3012\", \"msg\":\"apikey无效\" } } 返回结果正确 // Response { \"result\":[ { \"result\":{ \"total_btc\":\"3.28811692\", \"total_cny\":\"201875.67\", \"total_usd\":\"28847.20\", \"assets_list\":[ { \"coin_symbol\":\"BTC\", \"BTCValue\":\"0.21730559\", \"CNYValue\":\"13341.59\", \"USDValue\":\"1906.46\", \"balance\":\"0.21730558\", \"freeze\":\"0.00000000\" }, { \"coin_symbol\":\"BIX\", \"BTCValue\":\"0.03018417\", \"CNYValue\":\"1853.17\", \"USDValue\":\"264.81\", \"balance\":\"62.68909999\", \"freeze\":\"0.00000000\" } ] }, \"cmd\":\"transfer/assets\" } ] } Copyright © bibox.com 2019 all right reserved，powered by GitbookUpdate Date: 2019-11-12 "},"rest_api_c.html":{"url":"rest_api_c.html","title":"Restful API 合约交易","keywords":"","body":"Restful API 合约交易详细描述 查询合约资产 POST https://api.bibox.com/v1/cquery cmd：query/assets 示例 请求参数 // Request [ { \"cmd\":\"query/assets\", \"body\":{} } ] { \"url\":\"https://api.bibox365.com/v1/cquery\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"query/assets\\\",\\\"body\\\":{}}]\", \"apikey\":\"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\", \"sign\":\"85190bfcb83357b9fa5aa2e79f0d7826\" } } 示例代码 let CryptoJS = require(\"crypto-js\"); let request = require(\"request\"); let url = \"https://api.bibox.com/v1/cquery\"; let apikey = \"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\"; //your apikey let secret = \"1e01c22ff8c59e9d98d93423817303f098d93423\"; //your apikey secret let param = [ { \"cmd\": \"query/assets\", \"body\": {} } ]; let form = { \"cmds\": JSON.stringify(param), //格式化param \"apikey\": apikey, \"sign\": \"\" }; let sign = CryptoJS.HmacMD5(form.cmds, secret).toString();//签名cmds form.sign = sign; console.log(JSON.stringify({url, form})) request.post({url, form }, (error, response, body) => { if (!error && response && response.statusCode === 200) { try { console.log(body) } catch (error) { console.log(error) } } else { console.log(error, response, body); } }); 返回结果 // Response { \"result\":[ { \"result\":{ \"balance\":\"97.2378\", // 可用余额 \"freeze\":\"1.7326\", // 冻结金额 \"profit\":\"-2.4327\", \"margin\":\"1.7326\", \"imargin\":\"0.0000\", \"total_balance\":\"98.8397\", \"BTCValue\":\"0.02528321\", \"CNYValue\":\"664.61\", \"USDValue\":\"98.84\", \"floatProfitBTC\":\"-0.00003344\", \"floatProfit\":\"-0.1308\", \"profitBTC\":\"-0.00062226\", \"freezeBTC\":\"0.00044322\" }, \"cmd\":\"query/assets\" } ] } 查询单个合约持仓信息 POST https://api.bibox.com/v1/cquery cmd: query/order 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 pair true string 合约符号 4BTC_USDT,4ETH_USDT, ... 示例 请求参数 // Request { \"cmd\":\"query/order\", \"body\":{ \"pair\":\"4BTC_USDT\" // 合约符号：BTCUSDT永续合约符号为4BTC_USDT，ETHUSDT永续合约符号为4ETH_USDT 。。。 } } { \"url\":\"https://api.bibox.com/v1/cquery\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"query/order\\\",\\\"body\\\":{\\\"pair\\\":\\\"4BTC_USDT\\\"}}]\", \"apikey\":\"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\", \"sign\":\"e533359a43984510ef4dbcb0941bac6b\" } } 示例代码 let CryptoJS = require(\"crypto-js\"); let request = require(\"request\"); let url = \"https://api.bibox.com/v1/cquery\"; let apikey = \"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\"; //your apikey let secret = \"1e01c22ff8c59e9d98d93423817303f098d93423\"; //your apikey secret let param = [ { \"cmd\": \"query/order\", \"body\": { \"pair\":\"4BTC_USDT\" } } ]; let form = { \"cmds\": JSON.stringify(param), //格式化param \"apikey\": apikey, \"sign\": \"\" }; let sign = CryptoJS.HmacMD5(form.cmds, secret).toString();//签名cmds form.sign = sign; console.log(JSON.stringify({url, form})) request.post({url, form }, (error, response, body) => { if (!error && response && response.statusCode === 200) { try { console.log(body) } catch (error) { console.log(error) } } else { console.log(error, response, body); } }); 返回结果 // Response { \"result\":[ { \"result\":{ \"coin_symbol\":\"USDT\", \"pair\":\"4BTC_USDT\", // 合约符号 \"contract\":2, // 持仓张数 \"margin\":\"1.5612\", // 持仓保证金 \"profit\":\"-2.4995\", \"price\":\"3903.0450\", // 开仓均价 \"order_side\":2, // 开仓方向：1开多，2开空 \"price_force\":\"3961.5907\", // 强平价格 \"floatProfit\":\"-0.1376\", \"leverage\":50, // 0:全仓，其它:逐仓杠杆倍数 \"icontract_up\":2, // 开多未成交订单张数 \"icontract_down\":0 // 开空未成交订单张数 }, \"cmd\":\"query/order\" } ] } 查询所有合约持仓信息 POST https://api.bibox.com/v1/cquery cmd: query/orderAll 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 pair true string 合约符号 4BTC_USDT,4ETH_USDT, ... 示例 请求参数 // Request { \"cmd\":\"query/orderAll\", \"body\":{ } } { \"url\":\"https://api.bibox.com/v1/cquery\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"query/orderAll\\\",\\\"body\\\":{}}]\", \"apikey\":\"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\", \"sign\":\"1a9be520fb658c677b86f99769634e5b\" } } 示例代码 let CryptoJS = require(\"crypto-js\"); let request = require(\"request\"); let url = \"https://api.bibox.com/v1/cquery\"; let apikey = \"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\"; //your apikey let secret = \"1e01c22ff8c59e9d98d93423817303f098d93423\"; //your apikey secret let param = [ { \"cmd\": \"query/orderAll\", \"body\": { } } ]; let form = { \"cmds\": JSON.stringify(param), //格式化param \"apikey\": apikey, \"sign\": \"\" }; let sign = CryptoJS.HmacMD5(form.cmds, secret).toString();//签名cmds form.sign = sign; console.log(JSON.stringify({url, form})) request.post({url, form }, (error, response, body) => { if (!error && response && response.statusCode === 200) { try { console.log(body) } catch (error) { console.log(error) } } else { console.log(error, response, body); } }); 返回结果 // Response { \"result\":[ { \"result\":[ { \"coin_symbol\":\"USDT\", \"pair\":\"4BTC_USDT\", // 合约符号 \"contract\":2, // 持仓张数 \"margin\":\"1.5612\", // 持仓保证金 \"profit\":\"-2.4995\", \"price\":\"3903.0450\", // 开仓均价 \"order_side\":2, // 开仓方向：1开多，2开空 \"price_force\":\"3961.5907\", // 强平价格 \"floatProfit\":\"-0.1376\", \"leverage\":50, // 0:全仓，其它:逐仓杠杆倍数 \"icontract_up\":2, // 开多未成交订单张数 \"icontract_down\":0 // 开空未成交订单张数 }, { \"coin_symbol\":\"USDT\", \"pair\":\"4ETH_USDT\", \"contract\":6, \"margin\":\"0.1714\", \"profit\":\"0.0668\", \"price\":\"142.8816\", \"order_side\":2, \"price_force\":\"145.0248\", \"floatProfit\":\"0.0063\", \"leverage\":50, \"icontract_up\":6, \"icontract_down\":0 } ], \"cmd\":\"query/orderAll\" } ] } 查询合约未成交订单 POST https://api.bibox.com/v1/cquery cmd: query/orderPending 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 page true integer 第几页 1,2, ... size true integer 条数 10,20, ... pair false string 合约符号 4BTC_USDT,4ETH_USDT, ... 示例 请求参数 // Request { \"cmd\":\"query/orderPending\", \"body\":{ \"page\":1, \"size\":20, \"pair\":\"\" } } { \"url\":\"https://api.bibox.com/v1/cquery\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"query/orderPending\\\",\\\"body\\\":{\\\"page\\\":1,\\\"size\\\":20,\\\"pair\\\":\\\"\\\"}}]\", \"apikey\":\"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\", \"sign\":\"caef8a751a35660e073ea07014b3b8d8\" } } 示例代码 let CryptoJS = require(\"crypto-js\"); let request = require(\"request\"); let url = \"https://api.bibox.com/v1/cquery\"; let apikey = \"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\"; //your apikey let secret = \"1e01c22ff8c59e9d98d93423817303f098d93423\"; //your apikey secret let param = [ { \"cmd\":\"query/orderPending\", \"body\":{ \"page\":1, \"size\":20, \"pair\":\"\" } } ]; let form = { \"cmds\": JSON.stringify(param), //格式化param \"apikey\": apikey, \"sign\": \"\" }; let sign = CryptoJS.HmacMD5(form.cmds, secret).toString();//签名cmds form.sign = sign; console.log(JSON.stringify({url, form})) request.post({url, form }, (error, response, body) => { if (!error && response && response.statusCode === 200) { try { console.log(body) } catch (error) { console.log(error) } } else { console.log(error, response, body); } }); 返回结果 // Response { \"result\":[ { \"result\":{ \"count\":3, \"page\":1, \"items\":[ { \"id\":491168, // 订单号 \"coin_symbol\":\"USDT\", \"pair\":\"4ETH_USDT\", // 合约符号 \"order_side\":1, // 挂单方向：1开多，2开空 \"order_type\":2, \"contract\":3, // 委托合约张数 \"order_from\":1, \"status\":1, // 0,1未成交 2部分成交 3完全成交 4部分取消 5完全取消 6,7 系统取消, >=100 下单失败 \"price\":\"136.0000\", // 委托价格 \"price_deal\":\"0.0000\", // 成交均价 \"deal_count\":0, \"contract_deal\":0, // 已成交合约张数 \"createdAt\":\"2019-02-20T02:01:46.000Z\", \"updatedAt\":\"2019-02-20T02:01:46.000Z\" }, { \"id\":489453, \"coin_symbol\":\"USDT\", \"pair\":\"4BTC_USDT\", \"order_side\":1, \"order_type\":2, \"contract\":2, \"order_from\":1, \"status\":1, \"price\":\"3850.0000\", \"price_deal\":\"0.0000\", \"deal_count\":0, \"contract_deal\":0, \"createdAt\":\"2019-02-20T01:51:41.000Z\", \"updatedAt\":\"2019-02-20T01:51:42.000Z\" } ] }, \"cmd\":\"query/orderPending\" } ] } 合约下单 POST https://api.bibox.com/v1/ctrade cmd： order/open 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 order_type true integer 订单类型 1:市价,2:限价 leverage true integer 杠杆倍数 全仓:0,逐仓:1,2,... cross_leverage false integer 全仓杠杆 25 leverage=0时且全仓:1,2,...50 order_side true integer 挂单方向 1:开多,2:开空 price true string 委托价格 大于0的数 contract true string 合约张数 1,2, ... pair true string 合约符号 4BTC_USDT,4ETH_USDT, ... order_from true integer 6 6 client_oid false Long 自定义标识 > 0 示例 请求参数 // Request { \"cmd\":\"order/open\", \"body\":{ \"pair\":\"4BTC_USDT\", \"order_type\":2, \"price\":\"3929.97\", \"contract\":\"1\", \"order_from\":1, \"leverage\":50, \"cross_leverage\":25, \"order_side\":1, \"client_oid\": '123456789', } } { \"url\":\"https://api.bibox.com/v1/ctrade\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"order/open\\\",\\\"body\\\":{\\\"pair\\\":\\\"4BTC_USDT\\\",\\\"order_type\\\":2,\\\"price\\\":\\\"3929.97\\\",\\\"contract\\\":\\\"1\\\",\\\"order_from\\\":1,\\\"leverage\\\":50,\\\"cross_leverage\\\":25,\\\"order_side\\\":1,\\\"client_oid\\\":\\\"123456789\\\"}}]\", \"apikey\":\"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\", \"sign\":\"d298bb71db50f31c9fc923595e942fcd\" } } 示例代码 let CryptoJS = require(\"crypto-js\"); let request = require(\"request\"); let url = \"https://api.bibox.com/v1/cquery\"; let apikey = \"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\"; //your apikey let secret = \"1e01c22ff8c59e9d98d93423817303f098d93423\"; //your apikey secret let param = [ { \"cmd\":\"order/open\", \"body\":{ \"pair\":\"4BTC_USDT\", \"order_type\":2, \"price\":\"3929.97\", \"contract\":\"1\", \"order_from\":1, \"leverage\":50, \"cross_leverage\":25, \"order_side\":1, \"client_oid\": '123456789', } } ]; let form = { \"cmds\": JSON.stringify(param), //格式化param \"apikey\": apikey, \"sign\": \"\" }; let sign = CryptoJS.HmacMD5(form.cmds, secret).toString();//签名cmds form.sign = sign; console.log(JSON.stringify({url, form})) request.post({url, form }, (error, response, body) => { if (!error && response && response.statusCode === 200) { try { console.log(body) } catch (error) { console.log(error) } } else { console.log(error, response, body); } }); 返回结果 // Response { \"result\":[ { result: '17592186044786', // 订单号 client_oid: '123456789', // 自定义标识 cmd: 'order/open', } ] } 合约批量下单 POST https://api.bibox.com/v1/ctrade cmd: order/openBatch 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 leverage true integer 杠杆倍数 全仓:0,逐仓:1,2,... cross_leverage false integer 全仓杠杆 25 leverage=0时全仓1,2,...50 order_side true integer 挂单方向 1:开多,2:开空 price true string 委托价格 大于0的数 contract true string 合约张数 1,2, ... pair true string 合约符号 4BTC_USDT,4ETH_USDT, ... client_oid false Long 自定义标识 > 0 示例 请求参数 // Request { \"cmd\":\"order/openBatch\", \"body\":{ \"pair\":\"4ETH_USDT\", \"leverage\":50, \"cross_leverage\": 25, \"arr\":[ { \"order_side\":1, \"price\":140, \"contract\":1, \"client_oid\": '123456787' }, { \"order_side\":1, \"price\":140.5, \"contract\":1, \"client_oid\": '123456788' } ] } } { \"url\":\"https://api.bibox.com/v1/ctrade\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"order/openBatch\\\",\\\"body\\\":{\\\"pair\\\":\\\"4ETH_USDT\\\",\\\"leverage\\\":50,\\\"cross_leverage\\\":25,\\\"arr\\\":[{\\\"order_side\\\":1,\\\"price\\\":140,\\\"contract\\\":1,\\\"client_oid\\\":\\\"123456787\\\"},{\\\"order_side\\\":1,\\\"price\\\":140.5,\\\"contract\\\":1,\\\"client_oid\\\":\\\"123456788\\\"}]}}]\", \"apikey\":\"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\", \"sign\":\"cb3eee178b4f6442026d324760f9b9cd\" } } 示例代码 let CryptoJS = require(\"crypto-js\"); let request = require(\"request\"); let url = \"https://api.bibox.com/v1/ctrade\"; let apikey = \"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\"; //your apikey let secret = \"1e01c22ff8c59e9d98d93423817303f098d93423\"; //your apikey secret let param = [ { \"cmd\":\"order/openBatch\", \"body\":{ \"pair\":\"4ETH_USDT\", \"leverage\":50, \"cross_leverage\": 25, \"arr\":[ { \"order_side\":1, \"price\":140, \"contract\":1, \"client_oid\": '123456787' }, { \"order_side\":1, \"price\":140.5, \"contract\":1, \"client_oid\": '123456788' } ] } } ]; let form = { \"cmds\": JSON.stringify(param), //格式化param \"apikey\": apikey, \"sign\": \"\" }; let sign = CryptoJS.HmacMD5(form.cmds, secret).toString();//签名cmds form.sign = sign; console.log(JSON.stringify({url, form})) request.post({url, form }, (error, response, body) => { if (!error && response && response.statusCode === 200) { try { console.log(body) } catch (error) { console.log(error) } } else { console.log(error, response, body); } }); 返回结果 // Response { \"result\":[ { \"result\":[ { code: 0, // 0代表成功；非0代表失败，code是错误码 id: '17592186044787', // 挂单id号 msg: '', client_oid: '123456787' }, { code: 0, id: '17592186044790', msg: '', client_oid: '123456788' } ], \"cmd\":\"order/openBatch\" } ] } 合约撤单 POST https://api.bibox.com/v1/ctrade cmd: order/close 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 order_id true string 订单号 示例 请求参数 // Request { \"cmd\":\"order/close\", \"body\":{ \"order_id\":\"574954\" } } { \"url\":\"https://api.bibox.com/v1/ctrade\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"order/close\\\",\\\"body\\\":{\\\"order_id\\\":\\\"574954\\\"}}]\", \"apikey\":\"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\", \"sign\":\"9a9286632189e3c2d6581cb81e38349b\" } } 示例代码 let CryptoJS = require(\"crypto-js\"); let request = require(\"request\"); let url = \"https://api.bibox.com/v1/ctrade\"; let apikey = \"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\"; //your apikey let secret = \"1e01c22ff8c59e9d98d93423817303f098d93423\"; //your apikey secret let param = [ { \"cmd\":\"order/close\", \"body\":{ \"order_id\":\"574954\" } } ]; let form = { \"cmds\": JSON.stringify(param), //格式化param \"apikey\": apikey, \"sign\": \"\" }; let sign = CryptoJS.HmacMD5(form.cmds, secret).toString();//签名cmds form.sign = sign; console.log(JSON.stringify({url, form})) request.post({url, form }, (error, response, body) => { if (!error && response && response.statusCode === 200) { try { console.log(body) } catch (error) { console.log(error) } } else { console.log(error, response, body); } }); 返回结果 // Response { \"result\":[ { \"result\":\"success\", \"cmd\":\"order/close\" } ] } 合约撤多单 POST https://api.bibox.com/v1/ctrade cmd: order/closeBatch 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 order_ids true string 订单号数组 示例 请求参数 // Request { \"cmd\":\"order/closeBatch\", \"body\":{ \"order_ids\":[ \"574953\", \"574954\" ] }, \"index\":13 } { \"url\":\"https://api.bibox.com/v1/ctrade\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"order/closeBatch\\\",\\\"body\\\":{\\\"order_ids\\\":[\\\"574953\\\",\\\"574954\\\"]},\\\"index\\\":13}]\", \"apikey\":\"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\", \"sign\":\"64449ef8dc5016a6230ce4a8f0f18eb1\" } } 示例代码 let CryptoJS = require(\"crypto-js\"); let request = require(\"request\"); let url = \"https://api.bibox.com/v1/ctrade\"; let apikey = \"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\"; //your apikey let secret = \"1e01c22ff8c59e9d98d93423817303f098d93423\"; //your apikey secret let param = [ { \"cmd\":\"order/closeBatch\", \"body\":{ \"order_ids\":[ \"574953\", \"574954\" ] }, \"index\":13 } ]; let form = { \"cmds\": JSON.stringify(param), //格式化param \"apikey\": apikey, \"sign\": \"\" }; let sign = CryptoJS.HmacMD5(form.cmds, secret).toString();//签名cmds form.sign = sign; console.log(JSON.stringify({url, form})) request.post({url, form }, (error, response, body) => { if (!error && response && response.statusCode === 200) { try { console.log(body) } catch (error) { console.log(error) } } else { console.log(error, response, body); } }); 返回结果 // Response { \"result\":[ { \"result\":\"success\", \"cmd\":\"order/closeBatch\", \"index\":13 } ] } 合约撤1000单 POST https://api.bibox.com/v1/ctrade cmd: order/closeAll 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 pair false string 合约符号 4BTC_USDT,4ETH_USDT, ... 示例 请求参数 // Request { \"cmd\":\"order/closeAll\", \"body\":{ \"pair\":\"4BTC_USDT\" }, \"index\":13 } { \"url\":\"https://api.bibox.com/v1/ctrade\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"order/closeAll\\\",\\\"body\\\":{\\\"pair\\\":\\\"4BTC_USDT\\\"},\\\"index\\\":13}]\", \"apikey\":\"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\", \"sign\":\"d0ab49a6de0aa0254baa8445582b42c2\" } } 示例代码 let CryptoJS = require(\"crypto-js\"); let request = require(\"request\"); let url = \"https://api.bibox.com/v1/ctrade\"; let apikey = \"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\"; //your apikey let secret = \"1e01c22ff8c59e9d98d93423817303f098d93423\"; //your apikey secret let param = [ { \"cmd\":\"order/closeAll\", \"body\":{ \"pair\":\"4BTC_USDT\" }, \"index\":13 } ]; let form = { \"cmds\": JSON.stringify(param), //格式化param \"apikey\": apikey, \"sign\": \"\" }; let sign = CryptoJS.HmacMD5(form.cmds, secret).toString();//签名cmds form.sign = sign; console.log(JSON.stringify({url, form})) request.post({url, form }, (error, response, body) => { if (!error && response && response.statusCode === 200) { try { console.log(body) } catch (error) { console.log(error) } } else { console.log(error, response, body); } }); 返回结果 // Response { \"result\":[ { \"result\":\"success\", \"cmd\":\"order/closeAll\", \"index\":13 } ] } 合约调整杠杆倍数 POST https://api.bibox.com/v1/ctrade cmd: order/changeLeverage 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 pair true string 合约符号 4BTC_USDT,4ETH_USDT, ... leverage true integer 杠杆倍数 全仓:0,逐仓:1,2,... cross true integer 是否全仓 0逐仓，1全仓 示例 请求参数 // Request { \"cmd\":\"order/changeLeverage\", \"body\":{ \"pair\":\"4BTC_USDT\", \"leverage\":40, \"cross\": 0 }, \"index\":13 } { \"url\":\"https://api.bibox.com/v1/ctrade\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"order/changeLeverage\\\",\\\"body\\\":{\\\"pair\\\":\\\"4BTC_USDT\\\",\\\"leverage\\\":40,\\\"cross\\\":0},\\\"index\\\":13}]\", \"apikey\":\"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\", \"sign\":\"1abd620b3cc04be7e181309d5c83670e\" } } 示例代码 let CryptoJS = require(\"crypto-js\"); let request = require(\"request\"); let url = \"https://api.bibox.com/v1/ctrade\"; let apikey = \"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\"; //your apikey let secret = \"1e01c22ff8c59e9d98d93423817303f098d93423\"; //your apikey secret let param = [ { \"cmd\":\"order/changeLeverage\", \"body\":{ \"pair\":\"4BTC_USDT\", \"leverage\":40, \"cross\": 0 }, \"index\":13 } ]; let form = { \"cmds\": JSON.stringify(param), //格式化param \"apikey\": apikey, \"sign\": \"\" }; let sign = CryptoJS.HmacMD5(form.cmds, secret).toString();//签名cmds form.sign = sign; console.log(JSON.stringify({url, form})) request.post({url, form }, (error, response, body) => { if (!error && response && response.statusCode === 200) { try { console.log(body) } catch (error) { console.log(error) } } else { console.log(error, response, body); } }); 返回结果 // Response { \"result\":[ { \"result\":\"success\", \"cmd\":\"order/changeLeverage\", \"index\":13 } ] } 合约调整保证金 POST https://api.bibox.com/v1/ctrade cmd: order/changeMargin 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 pair true string 合约符号 4BTC_USDT,4ETH_USDT, ... margin true integer 增减保证金 增加margin>=0.5;减少margin 示例 请求参数 // Request { \"cmd\":\"order/changeMargin\", \"body\":{ \"pair\": \"4ETH_USDT\", \"margin\": 4 }, \"index\":13 } { \"url\":\"https://api.bibox.com/v1/ctrade\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"order/changeMargin\\\",\\\"body\\\":{\\\"pair\\\":\\\"4ETH_USDT\\\",\\\"margin\\\":4},\\\"index\\\":13}]\", \"apikey\":\"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\", \"sign\":\"f6ef54d12ccadaef85782a7a238413f6\" } } 示例代码 let CryptoJS = require(\"crypto-js\"); let request = require(\"request\"); let url = \"https://api.bibox.com/v1/ctrade\"; let apikey = \"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\"; //your apikey let secret = \"1e01c22ff8c59e9d98d93423817303f098d93423\"; //your apikey secret let param = [ { \"cmd\":\"order/changeMargin\", \"body\":{ \"pair\": \"4ETH_USDT\", \"margin\": 4 }, \"index\":13 } ]; let form = { \"cmds\": JSON.stringify(param), //格式化param \"apikey\": apikey, \"sign\": \"\" }; let sign = CryptoJS.HmacMD5(form.cmds, secret).toString();//签名cmds form.sign = sign; console.log(JSON.stringify({url, form})) request.post({url, form }, (error, response, body) => { if (!error && response && response.statusCode === 200) { try { console.log(body) } catch (error) { console.log(error) } } else { console.log(error, response, body); } }); 返回结果 // Response { \"result\":[ { \"result\":\"success\", \"cmd\":\"order/changeMargin\", \"index\":13 } ] } 主账户资金转入合约账户 POST https://api.bibox.com/v1/ctrade cmd: transfer/in 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 amount true integer 金额 示例 请求参数 // Request { \"cmd\":\"transfer/in\", \"body\":{ \"amount\":\"100\" } } { \"url\":\"https://api.bibox.com/v1/ctrade\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"transfer/in\\\",\\\"body\\\":{\\\"amount\\\":\\\"100\\\"}}]\", \"apikey\":\"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\", \"sign\":\"16c40525ae36ae0f55fe5237c91336cd\" } } 示例代码 let CryptoJS = require(\"crypto-js\"); let request = require(\"request\"); let url = \"https://api.bibox.com/v1/ctrade\"; let apikey = \"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\"; //your apikey let secret = \"1e01c22ff8c59e9d98d93423817303f098d93423\"; //your apikey secret let param = [ { \"cmd\":\"transfer/in\", \"body\":{ \"amount\":\"100\" } } ]; let form = { \"cmds\": JSON.stringify(param), //格式化param \"apikey\": apikey, \"sign\": \"\" }; let sign = CryptoJS.HmacMD5(form.cmds, secret).toString();//签名cmds form.sign = sign; console.log(JSON.stringify({url, form})) request.post({url, form }, (error, response, body) => { if (!error && response && response.statusCode === 200) { try { console.log(body) } catch (error) { console.log(error) } } else { console.log(error, response, body); } }); 返回结果 // Response { \"result\":[ { \"result\":\"success\", \"cmd\":\"transfer/in\" } ] } 查询市场成交记录 GET https://api.bibox.com/v1/cquery?cmd=deals&&pair=4ETH_USDT&&size=10 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 pair true String 合约符号 4BTC_USDT,4ETH_USDT,... size true integer 返回数量 1,2,... 返回结果说明{ \"result\":{ \"result\":[ { \"pair\":\"4ETH_USDT\", // 合约符号 \"order_side\":1, // 1看涨 2 看空 \"contract\":75, // 张数 \"price\":\"182.7500\", // 价格 \"createdAt\":1565861520000 // 时间 }, ... ], \"cmd\":\"deals\" } } 通过订单号查询未成交订单 POST https://api.bibox.com/v1/cquery cmd: query/orderPendingByIDs 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 ids true string array 订单号 最大长度限制50单 示例 请求参数 // Request { \"cmd\":\"query/orderPendingByIDs\", \"body\":{ \"ids\":[ \"491168\", \"2\" ] }, \"index\":13 } { \"url\":\"https://api.bibox.com/v1/cquery\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"query/orderPendingByIDs\\\",\\\"body\\\":{\\\"ids\\\":[\\\"491168\\\",\\\"2\\\"]},\\\"index\\\":13}]\", \"apikey\":\"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\", \"sign\":\"3172e38a62698ffc4f73223c6a0b22d3\" } } 示例代码 let CryptoJS = require(\"crypto-js\"); let request = require(\"request\"); let url = \"https://api.bibox.com/v1/cquery\"; let apikey = \"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\"; //your apikey let secret = \"1e01c22ff8c59e9d98d93423817303f098d93423\"; //your apikey secret let param = [ { \"cmd\":\"query/orderPendingByIDs\", \"body\":{ \"ids\":[ \"491168\", \"2\" ] }, \"index\":13 } ]; let form = { \"cmds\": JSON.stringify(param), //格式化param \"apikey\": apikey, \"sign\": \"\" }; let sign = CryptoJS.HmacMD5(form.cmds, secret).toString();//签名cmds form.sign = sign; console.log(JSON.stringify({url, form})) request.post({url, form }, (error, response, body) => { if (!error && response && response.statusCode === 200) { try { console.log(body) } catch (error) { console.log(error) } } else { console.log(error, response, body); } }); 返回结果 // Response { \"result\":[ { \"result\":[ { \"id\":491168, // 订单号 \"coin_symbol\":\"USDT\", \"pair\":\"4ETH_USDT\", // 合约符号 \"order_side\":1, // 挂单方向：1开多，2开空 \"order_type\":2, \"contract\":3, // 委托合约张数 \"order_from\":1, \"status\":1, // 0,1未成交 2部分成交 3完全成交 4部分取消 5完全取消 6,7 系统取消, >=100 下单失败 \"price\":\"136.0000\", // 委托价格 \"price_deal\":\"0.0000\", // 成交均价 \"deal_count\":0, \"contract_deal\":0, // 已成交合约张数 \"createdAt\":\"2019-02-20T02:01:46.000Z\", \"updatedAt\":\"2019-02-20T02:01:46.000Z\" }, { \"id\":2, \"coin_symbol\":\"USDT\", \"pair\":\"4BTC_USDT\", \"order_side\":1, \"order_type\":2, \"contract\":1, \"order_from\":1, \"status\":3, \"price\":\"3622.0000\", \"price_deal\":\"3622.0000\", \"deal_count\":1, \"contract_deal\":1, \"createdAt\":\"2019-02-15T13:10:27.000Z\", \"updatedAt\":\"2019-02-15T13:10:45.000Z\" } ], \"cmd\":\"query/orderPendingByIDs\", \"index\":13 } ] } 查询个人成交记录 POST https://api.bibox.com/v1/cquery cmd: query/orderList 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 pair true String 合约符号 4BTC_USDT,4ETH_USDT,... page true integer 第几页 1,2,... size true integer 多少条 1,2,... begin_time false integer 开始时间 end_time false integer 结束时间 type false integer 成交类型 1开仓, 2平仓, 3爆仓, 4减仓 示例 请求参数 // Request { \"cmd\":\"query/orderList\", \"body\":{ \"pair\":\"4BTC_USDT\", \"page\":1, \"size\":100, \"begin_time\":1550971541000, \"end_time\":1550977541000, type: 2, } } { \"url\":\"https://api.bibox.com/v1/cquery\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"query/orderList\\\",\\\"body\\\":{\\\"pair\\\":\\\"4BTC_USDT\\\",\\\"page\\\":1,\\\"size\\\":100,\\\"begin_time\\\":1550971541000,\\\"end_time\\\":1550977541000,\\\"type\\\":2}}]\", \"apikey\":\"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\", \"sign\":\"2517280ee4d332c3b63d4ee34fa5bb06\" } } 示例代码 let CryptoJS = require(\"crypto-js\"); let request = require(\"request\"); let url = \"https://api.bibox.com/v1/cquery\"; let apikey = \"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\"; //your apikey let secret = \"1e01c22ff8c59e9d98d93423817303f098d93423\"; //your apikey secret let param = [ { \"cmd\":\"query/orderList\", \"body\":{ \"pair\":\"4BTC_USDT\", \"page\":1, \"size\":100, \"begin_time\":1550971541000, \"end_time\":1550977541000, type: 2, } } ]; let form = { \"cmds\": JSON.stringify(param), //格式化param \"apikey\": apikey, \"sign\": \"\" }; let sign = CryptoJS.HmacMD5(form.cmds, secret).toString();//签名cmds form.sign = sign; console.log(JSON.stringify({url, form})) request.post({url, form }, (error, response, body) => { if (!error && response && response.statusCode === 200) { try { console.log(body) } catch (error) { console.log(error) } } else { console.log(error, response, body); } }); 返回结果 // Response { \"result\":[ { \"result\":{ \"count\":101, \"page\":1, \"items\":[ { \"id\":236343, \"coin_symbol\":\"USDT\", \"pair\":\"4BTC_USDT\", // 合约符号 \"type\":2, // 1开仓, 2平仓, 3爆仓, 4减仓 \"order_side\":2, // 1开多，2开空 \"price_open\":\"3999.0000\", // 委托价格 \"price\":\"3964.5800\", // 开仓均价 \"price_deal\":\"3999.0000\", // 成交价格 \"contract\":2, // 合约张数 \"profit\":\"0.6884\", // 盈亏 \"fee\":\"0.0000\", // 手续费 \"createdAt\":\"2019-02-23T17:07:31.000Z\" }, ... ] }, \"cmd\":\"query/orderList\" } ] } 查询订单详情 POST https://api.bibox.com/v1/cquery cmd: query/orderDetailByID 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 id true String 订单号 示例 请求参数 // Request { \"cmd\":\"query/orderDetailByID\", \"body\":{ \"id\":\"58\", // 订单号 } } { \"url\":\"https://api.bibox.com/v1/cquery\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"query/orderDetailByID\\\",\\\"body\\\":{\\\"id\\\":\\\"58\\\"}}]\", \"apikey\":\"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\", \"sign\":\"2a5c0bdaea46ddf4efa809bd92e0181a\" } } 示例代码 let CryptoJS = require(\"crypto-js\"); let request = require(\"request\"); let url = \"https://api.bibox.com/v1/cquery\"; let apikey = \"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\"; //your apikey let secret = \"1e01c22ff8c59e9d98d93423817303f098d93423\"; //your apikey secret let param = [ { \"cmd\":\"query/orderDetailByID\", \"body\":{ \"id\":\"58\", // 订单号 } } ]; let form = { \"cmds\": JSON.stringify(param), //格式化param \"apikey\": apikey, \"sign\": \"\" }; let sign = CryptoJS.HmacMD5(form.cmds, secret).toString();//签名cmds form.sign = sign; console.log(JSON.stringify({url, form})) request.post({url, form }, (error, response, body) => { if (!error && response && response.statusCode === 200) { try { console.log(body) } catch (error) { console.log(error) } } else { console.log(error, response, body); } }); 返回结果 // Response { \"result\":[ { \"result\":{ \"items\":[ { \"id\":42, // 成交记录ID \"coin_symbol\":\"USDT\", //计价单位 \"pair\":\"4BTC_USDT\", // 合约符号 \"order_side\":1, // 1 买，看涨； 2 卖，看空； \"contract\":1, // 合约张数 \"order_from\":1, // 1网页，2安卓，3ios， 6 apikey， \"createdAt\":\"2019-08-13T08:22:25.000Z\", // 创建时间 \"updatedAt\":\"2019-08-13T08:22:26.000Z\", \"price\":\"7029.9700\", // 价格 \"price_deal\":\"0.0000\", // 成交价 \"fee\":\"0.0000\", // 手续费 \"is_cancel\":1, // 0 正常单； 1: 已撤销 \"is_maker\":1, // 0: taker; 1: maker; \"order_type\":2 // 1 市价单； 2 限价单 } ], \"count\":9, \"page\":1 }, \"cmd\":\"query/orderDetailByID\" } ] } 查询合约面值(不需要apikey) GET https://api.bibox.com/v1/cquery?cmd=contractValue 返回结果说明 { \"result\":{ \"result\":[ { \"pair\":\"4BTC_USDT\", \"value\":\"0.0100000000\", \"coin_symbol\":\"BTC\" }, ], \"cmd\":\"contractValue\" } } 查询合约杠杆信息(不需要apikey) GET https://api.bibox.com/v1/cquery?cmd=contractConfig 返回结果说明 { \"result\":{ \"result\":{ \"cross_leverage\":25, // 全仓默认杠杆数 \"leverage_max\":50, // 最大杠杆数 \"margin_rate_force\":\"0.01\", // 爆仓率 \"night_fee_rate\":\"0.0006\", // 隔夜费 \"hold_limit\":{ // 最大持仓数量 \"BTC\":5000, \"ETH\":150000, \"EOS\":50000, \"LTC\":35000, \"BCH\":100000 } }, \"cmd\":\"contractConfig\" } } 查询合约单笔下单限制(不需要apikey) GET https://api.bibox.com/v1/cquery?cmd=openLimit 返回结果说明 { \"result\":{ \"result\":{ \"BTC\":5000, \"ETH\":75000, \"EOS\":75000, \"LTC\":15000, \"BCH\":15000 }, \"cmd\":\"openLimit\" } } Copyright © bibox.com 2019 all right reserved，powered by GitbookUpdate Date: 2019-11-19 "},"rest_api_spot.html":{"url":"rest_api_spot.html","title":"Restful API 币币交易","keywords":"","body":"Restful API 币币交易 市场行情(不需要apikey) 网络测试 GET https://api.bibox.com/v1/mdata?cmd=ping POST https://api.bibox.com/v1/mdata cmd：ping 示例 // Request { \"cmd\": \"ping\" \"body\": {} } { \"url\":\"https://api.bibox.com/v1/mdata\", \"form\":{ \"cmds\":\"[{\\\"body\\\":{},\\\"cmd\\\":\\\"ping\\\"}]\", } } // Response { \"result\": {}, //测试成功 \"cmd\":\"ping\" } 查询交易对 GET https://api.bibox.com/v1/mdata?cmd=pairList POST https://api.bibox.com/v1/mdata cmd：api/pairList 示例 // Request { \"cmd\": \"api/pairList\", \"body\": {} } { \"url\":\"https://api.bibox.com/v1/mdata\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"api/pairList\\\",\\\"body\\\":{}}]\", } } // Response { \"result\":[ { \"id\":1,// 交易对id \"pair\":\"BIX_BTC\" //交易对symbol }, { \"id\":2, \"pair\":\"ETH_BTC\" } ], \"cmd\":\"api/pairList\" } 查询k线 GET https://api.bibox.com/v1/mdata?cmd=kline&pair=BIX_BTC&period=1min&size=10 POST https://api.bibox.com/v1/mdata cmd: api/kline 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 pair true string 交易对 BIX_BTC, ETH_BTC, ... period true string k线周期 '1min', '3min', '5min', '15min', '30min', '1hour', '2hour', '4hour', '6hour', '12hour', 'day', 'week' size false integer 数量 1000 1-1000 示例 // Request { \"cmd\": \"api/kline\", \"body\": { \"pair\": \"BIX_BTC\", \"period\": \"1min\", \"size\": 10 } } { \"url\":\"https://api.bibox.com/v1/mdata\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"api/kline\\\",\\\"body\\\":{\\\"pair\\\":\\\"BIX_BTC\\\",\\\"period\\\":\\\"1min\\\",\\\"size\\\":10}}]\", } } // Response { \"result\":[ { \"time\":1512660420000, // 时间戳 \"open\":\"0.00586568\", // 开盘价 \"high\":\"0.00586568\", // 最高价 \"low\":\"0.00586568\", // 最低价 \"close\":\"0.00586568\", // 收盘价 \"vol\":\"0\" // 成交量 }, { \"time\":1512660480000, \"open\":\"0.00586568\", \"high\":\"0.00586568\", \"low\":\"0.00586568\", \"close\":\"0.00586568\", \"vol\":\"10\" } ], \"cmd\":\"api/kline\" } 查询全币种市场行情 GET https://api.bibox.com/v1/mdata?cmd=marketAll POST https://api.bibox.com/v1/mdata cmd: api/marketAll 示例 // Request { \"cmd\": \"api/marketAll\", \"body\": {} } { \"url\":\"https://api.bibox.com/v1/mdata\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"api/marketAll\\\",\\\"body\\\":{}}]\", } } // Response { \"result\":[ { \"id\":4, \"coin_symbol\":\"BIX\", //交易币种 \"currency_symbol\":\"BTC\", //定价币种 \"last\":\"0.00002704\", //24h最新价 \"high\":\"0.00003480\", //24h最高价 \"low\":\"0.00001951\", //24h最低价 \"change\":\"+0.00000715\", //24h涨跌 \"percent\":\"+35.95%\", //24h涨跌幅 \"vol24H\":\"641954\", //24h成交量 \"amount\":\"16.55\", //24h成交额 \"last_cny\":\"1.84\", //最新价折算cny \"high_cny\":\"2.37\", \"low_cny\":\"1.33\", \"last_usd\":\"0.27\", //最新价折算usd \"high_usd\":\"0.35\", \"low_usd\":\"0.19\" }, { \"id\":5, \"coin_symbol\":\"ETH\", \"currency_symbol\":\"BTC\", \"last\":\"0.04341296\", \"high\":\"0.04884176\", \"low\":\"0.04321405\", \"change\":\"-0.00047878\", \"percent\":\"-1.09%\", \"vol24H\":\"86\", \"amount\":\"3.77\", \"last_cny\":\"2950.87\", \"high_cny\":\"3319.88\", \"low_cny\":\"2937.35\", \"last_usd\":\"432.60\", \"high_usd\":\"486.70\", \"low_usd\":\"430.62\" } ], \"cmd\":\"api/marketAll\" } 查询单币种市场行情 GET https://api.bibox.com/v1/mdata?cmd=market&pair=BIX_BTC POST https://api.bibox.com/v1/mdata cmd: api/market 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 pair true string 交易对 BIX_BTC, ETH_BTC, ... 示例 // Request { \"cmd\": \"api/market\", \"body\": { \"pair\": \"BIX_BTC\" } } { \"url\":\"https://api.bibox.com/v1/mdata\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"api/market\\\",\\\"body\\\":{\\\"pair\\\":\\\"BIX_BTC\\\"}}]\", } } // Response { \"result\":[ { \"id\":4, \"coin_symbol\":\"BIX\", //交易币种 \"currency_symbol\":\"BTC\", //定价币种 \"last\":\"0.00002704\", //24h最新价 \"high\":\"0.00003480\", //24h最高价 \"low\":\"0.00001951\", //24h最低价 \"change\":\"+0.00000715\", //24h涨跌 \"percent\":\"+35.95%\", //24h涨跌幅 \"vol24H\":\"641954\", //24h成交量 \"amount\":\"16.55\", //24h成交额 \"last_cny\":\"1.84\", //最新价折算cny \"high_cny\":\"2.37\", \"low_cny\":\"1.33\", \"last_usd\":\"0.27\", //最新价折算usd \"high_usd\":\"0.35\", \"low_usd\":\"0.19\" } ], \"cmd\":\"api/market\" } 查询市场深度 GET https://api.bibox.com/v1/mdata?cmd=depth&pair=BIX_BTC&size=10 POST https://api.bibox.com/v1/mdata cmd: api/depth 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 pair true string 交易对 BIX_BTC, ETH_BTC, ... size false integer 数量 200 1-200 示例 // Request { \"cmd\": \"api/depth\", \"body\": { \"pair\": \"BIX_BTC\" } } { \"url\":\"https://api.bibox.com/v1/mdata\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"api/depth\\\",\\\"body\\\":{\\\"pair\\\":\\\"BIX_BTC\\\"}}]\", } } // Response { \"result\":{ \"pair\":\"BIX_BTC\", \"update_time\":1510983122681, \"asks\":[ //卖方深度 { \"price\":\"0.008654\", //挂单价格 \"volume\":\"200.9123\" //挂单数量 } ], \"bids\":[ //买方深度 { \"price\":\"0.008596\", //挂单价格 \"volume\":\"18.54306495\" //挂单数量 }, { \"price\":\"0.00859289\", \"volume\":\"40.13567123\" } ] }, \"cmd\":\"api/depth\" } 查询成交记录 GET https://api.bibox.com/v1/mdata?cmd=deals&pair=BIX_BTC&size=10 POST https://api.bibox.com/v1/mdata cmd: api/deals 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 pair true string 交易对 BIX_BTC, ETH_BTC, ... size false integer 数量 200 1-200 示例 // Request { \"cmd\": \"api/deals\", \"body\": { \"pair\": \"LTC_BTC\" } } { \"url\":\"https://api.bibox.com/v1/mdata\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"api/deals\\\",\\\"body\\\":{\\\"pair\\\":\\\"LTC_BTC\\\"}}]\", } } // Response { \"result\":[ { \"pair\":\"LTC_BTC\", \"price\":\"0.008601\", //成交价格 \"amount\":\"24.12584739\", //成交数量 \"time\":\"1512721748000\", //成交时间 \"side\":2 //taker成交方向，1-买，2-卖 }, { \"pair\":\"LTC_BTC\", \"price\":\"0.008611\", //成交价格 \"amount\":\"24.23584739\", //成交数量 \"time\":\"1512721748000\", //成交时间 \"side\":2 //taker成交方向，1-买，2-卖 } ], \"cmd\":\"api/deals\" } 查询市场ticker GET https://api.bibox.com/v1/mdata?cmd=ticker&pair=BIX_BTC POST https://api.bibox.com/v1/mdata cmd: api/ticker 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 pair true string 交易对 BIX_BTC, ETH_BTC, ... 示例 // Request { \"cmd\": \"api/ticker\", \"body\": { \"pair\": \"BIX_BTC\" } } { \"url\":\"https://api.bibox.com/v1/mdata\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"api/ticker\\\",\\\"body\\\":{\\\"pair\\\":\\\"BIX_BTC\\\"}}]\", } } // Response { \"result\":{ \"pair\":\"BIX_BTC\", //交易对 \"buy\":\"0.00582132\", //最新买一价 \"buy_amount\":\"1\", //买一量 \"high\":\"0.00778847\", //24h最高价 \"last\":\"0.00582156\", //最新成交价 \"low\":\"0.00540611\", //24h最低价 \"sell\":\"0.00582152\", //最新卖一价 \"sell_amount\":\"1\", //卖一量 \"timestamp\":1510983122665, //时间戳 \"vol\":\"70.50811953\" //24h成交量 \"percent\":\"+10.02%\" //24h涨跌幅 \"last_cny\":\"621.53\", //最新成交价，cny计价 \"last_usd\":\"93.93\" //最新成交价，usd计价 }, \"cmd\":\"api/ticker\" } 下单限制信息 GET https://api.bibox.com/v1/orderpending?cmd=tradeLimit 返回结果说明 { \"result\":{ \"min_trade_price\":{ //最小下单价格 \"default\":\"0.00000001\", //普通交易对最小下单价格限制0.00000001 \"USDT\":\"0.0001\", //USDT交易区最下下单价格限制0.0001，超过0.0001的小数部分会自动舍弃，适用于所有以USDT计价的交易对 \"DAI\":\"0.0001\" //DAI交易区最小下单价格限制0.0001，超过0.0001的小数部分会自动舍弃，适用于所有以DAI计价的交易对 }, \"min_trade_amount\":{ //最小下单数量 \"default\":\"0.0001\" //最小下单数量限制0.0001，超过0.0001的小数部分会自动舍弃，适用于所有交易对 }, \"min_trade_money\":{ //最小下单金额 (money = price * amount) \"USDT\":\"1\", //USDT交易区最小下单金额限制为1 \"DAI\":\"1\", //DAI交易区最小下单金额限制为1，以此类推 \"GUSD\":\"1\", \"BIX\":\"3\", \"BTC\":\"0.0002\", \"ETH\":\"0.005\" } }, \"cmd\":\"tradeLimit\" } 用户资产信息(需要apikey) 币币账户资产 POST https://api.bibox.com/v1/transfer cmd: transfer/assets 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 select false integer 是否查询资产明细 不传-各币种总资产合计，1-请求所有币种资产明细 示例 // Request { \"cmd\": \"transfer/assets\", \"body\": { \"select\": 1 } } { \"url\":\"https://api.bibox.com/v1/transfer\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"transfer/assets\\\",\\\"body\\\":{\\\"select\\\":1}}]\", \"apikey\":\"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\", \"sign\":\"86e88a4bc8eedc795b453f121f5894ee\" } } // Response { \"result\":{ \"total_btc\":\"107.71371658\", //各币种资产总和，btc计价 \"total_cny\":\"5587362.53\", //各币种资产总和，cny计价 \"total_usd\":\"4000.30\", //各币种资产总和，usd计价 \"assets_list\":[ //币种资产明细，没有返回 [] { \"coin_symbol\":\"BTC\", \"balance\":\"102.31666784\", //可用 \"freeze\":\"0.01800000\", //冻结 \"BTCValue\":\"1100.35043000\", //btc估值 \"CNYValue\":\"59448654.69\", //cny估值 \"USDValue\":\"8945419.86\", //usd估值 }, { \"coin_symbol\":\"ETH\", \"balance\":\"100.00000000\", \"freeze\":\"0.00000000\", \"BTCValue\":\"1100.35043000\", //btc估值 \"CNYValue\":\"59448654.69\", //cny估值 \"USDValue\":\"8945419.86\", //usd估值 }, { \"coin_symbol\":\"LTC\", \"balance\":\"125.34853787\", \"freeze\":\"0.00000000\", \"BTCValue\":\"1100.35043000\", //btc估值 \"CNYValue\":\"59448654.69\", //cny估值 \"USDValue\":\"8945419.86\", //usd估值 }, { \"coin_symbol\":\"BIX\", \"balance\":\"712.79411732\", \"freeze\":\"0.00000000\", \"BTCValue\":\"1100.35043000\", //btc估值 \"CNYValue\":\"59448654.69\", //cny估值 \"USDValue\":\"8945419.86\", //usd估值 } ] }, \"cmd\":\"transfer/assets\" } 充值 POST https://api.bibox.com/v1/transfer cmd: transfer/transferIn 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 coin_symbol true string 充值币种 BIX, BTC, ... 示例 // Request { \"cmd\": \"transfer/transferIn\", \"body\":{ \"coin_symbol\":\"BIX\" } } { \"url\":\"https://api.bibox.com/v1/transfer\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"transfer/transferIn\\\",\\\"body\\\":{\\\"coin_symbol\\\":\\\"BIX\\\"}}]\", \"apikey\":\"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\", \"sign\":\"05068bce6cf2eb7619440d99be86abde\" } } // Response { \"result\":\"xxxxxxxxxxxxxxxxx\", //充值地址 \"cmd\":\"transfer/transferIn\" } 提现 POST https://api.bibox.com/v1/transfer cmd: transfer/transferOut 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 coin_symbol true string 提现币种 BIX, BTC, ... amount true double 提现数量 需大于各币种最小提现数量 totp_code false integer google验证码 新地址需要,旧地址不需要 trade_pwd false string 资金密码 新地址需要,旧地址不需要 addr true string 提现地址 币种合法地址 addr_remark true string 提现地址备注名称 memo false string 提现标签 一些币种提现必须指定标签，与地址组合标识唯一性，比如EOS 示例 // Request { \"cmd\": \"transfer/transferOut\", \"body\":{ \"coin_symbol\":\"BIX\", \"amount\":1, \"totp_code\":703634, \"trade_pwd\":\"12345678\", \"addr\":\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", \"addr_remark\":\"bibox-1\", \"memo\":\"\", } } { \"url\":\"https://api.bibox.com/v1/transfer\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"transfer/transferOut\\\",\\\"body\\\":{\\\"coin_symbol\\\":\\\"BIX\\\",\\\"amount\\\":1,\\\"totp_code\\\":703634,\\\"trade_pwd\\\":\\\"12345678\\\",\\\"addr\\\":\\\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\\",\\\"addr_remark\\\":\\\"bibox-1\\\",\\\"memo\\\":\\\"\\\"}}]\", \"apikey\":\"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\", \"sign\":\"8260d0e280d2b2a78ff29bb92acf5e6b\" } } // Response { \"result\":228 //提现id \"cmd\":\"transfer/transferOut\" } 查询充值记录 POST https://api.bibox.com/v1/transfer cmd: transfer/transferInList 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 filter_type false integer 充值记录筛选 0 0-全部，1-充值进行中，2-充值到账，3-充值失败 coin_symbol false string 充值币种 BIX, ETH, ... page true integer 第几页 从1开始 size true integer 每页数量 1-50 示例 // Request { \"cmd\": \"transfer/transferInList\", \"body\": { \"filter_type\": 0, \"page\": 1, \"size\": 10, } } { \"url\":\"https://api.bibox.com/v1/transfer\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"transfer/transferInList\\\",\\\"body\\\":{\\\"filter_type\\\":0,\\\"page\\\":1,\\\"size\\\":10}}]\", \"apikey\":\"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\", \"sign\":\"7c515dc6b6ccb803115ce8653ef6eed3\" } } // Response { \"result\":{ \"count\":2, \"page\":1, \"items\":[ { \"coin_symbol\":\"ETH\", // 充值币种 \"to_address\":\"xxxxxxxxxxxxxxxxxxxxxxxxxx\", // 充值地址 \"amount\":\"1.00000000\", // 充值数量 \"confirmCount\":\"15\", // 充值确认数 \"createdAt\":1540641511000, \"status\":2 // 充值状态, 1-充值进行中，2-充值到账，3-充值失败 }, { \"coin_symbol\":\"BIX\", \"to_address\":\"xxxxxxxxxxxxxxxxxxxxxxxxxx\", \"amount\":\"1.00000000\", \"confirmCount\":\"15\", \"createdAt\":1540622460000, \"status\":2 } ] }, \"cmd\":\"transfer/transferInList\" } 查询提现记录 POST https://api.bibox.com/v1/transfer cmd: transfer/transferOutList 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 filter_type false integer 提现记录筛选 -2：审核不通过；-1: 用户撤销；0:待审核; 1:审核通过（待发币）; 2: 发币中； 3：发币完成 coin_symbol false string 提现币种 BIX, ETH, ... page true integer 第几页 从1开始 size true integer 每页数量 1-50 示例 // Request { \"cmd\": \"transfer/transferOutList\", \"body\": { \"page\": 1, \"size\": 10, } } { \"url\":\"https://api.bibox.com/v1/transfer\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"transfer/transferOutList\\\",\\\"body\\\":{\\\"page\\\":1,\\\"size\\\":10}}]\", \"apikey\":\"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\", \"sign\":\"0702af0bab89897ffe0d486c265f2b21\" } } // Response { \"result\":{ \"count\":2, \"page\":1, \"items\":[ { \"coin_symbol\":\"ETH\", // 提现币种 \"to_address\":\"xxxxxxxxxxxxxxxxxxxxxxxxxx\", // 提现地址 \"amount\":\"1.00000000\", // 提现数量 \"fee\":\"0.00000000\", // 提现手续费 \"createdAt\":1540641511000, \"memo\":\"\", \"status\":-2 // 提现状态, -2：审核不通过；-1: 用户撤销；0:待审核; 1:审核通过（待发币）; 2: 发币中； 3：发币完成' }, { \"coin_symbol\":\"BIX\", \"to_address\":\"xxxxxxxxxxxxxxxxxxxxxxxxxx\", \"amount\":\"1.00000000\", \"fee\":\"0.00000000\", \"createdAt\":1540622460000, \"memo\":\"\", \"status\":3 } ] }, \"cmd\":\"transfer/transferOutList\" } 获取币种配置 POST https://api.bibox.com/v1/transfer cmd: transfer/coinConfig 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 coin_symbol false string 币种 BIX, ETH... 示例 // Request { \"cmd\": \"transfer/coinConfig\", \"body\": { } } { \"url\":\"https://api.bibox.com/v1/transfer\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"transfer/coinConfig\\\",\\\"body\\\":{}}]\", \"apikey\":\"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\", \"sign\":\"41babcc84fd5301117f4fcf66cd70b6f\" } } // Response { \"result\":[ { \"coin_symbol\":\"BTC\", \"original_decimals\":8, //币种原值精度 \"enable_deposit\":1, //是否可充值，0-禁止，1-可以 \"enable_withdraw\":1, //是否可提现，0-禁止，1-可以 \"withdraw_fee\":0.0005, //提现手续费 \"withdraw_min\":0.005 //最小提现数量 }, { \"coin_symbol\":\"BIX\", \"original_decimals\":18, \"enable_deposit\":0, \"enable_withdraw\":0, \"withdraw_fee\":2, \"withdraw_min\":10 }, ... //其他币种配置信息 ], \"cmd\":\"transfer/coinConfig\" } 查询某一条提现记录 POST https://api.bibox.com/v1/transfer cmd: transfer/withdrawInfo 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 id true integer 提现id 示例 // Request { \"cmd\": \"transfer/withdrawInfo\", \"body\": { \"id\": 228 } } { \"url\":\"https://api.bibox.com/v1/transfer\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"transfer/withdrawInfo\\\",\\\"body\\\":{\\\"id\\\":228}}]\", \"apikey\":\"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\", \"sign\":\"e5a1067e1f2aee028989552c23425099\" } } // Response { \"result\":{ \"id\":228, \"createdAt\": 1512756997000, \"coin_symbol\":\"LTC\", // 币种 \"to_address\":\"xxxxxxxxxxxxxxxxxxxxxxxxxx\", // 提现地址 \"status\":3, // 状态, -2：审核不通过；-1: 用户撤销；0:待审核; 1:审核通过（待发币）; 2: 发币中； 3：发币完成' \"amount\":\"1.00000000\", // 数量 \"fee\":0.1 // 手续费 }, \"cmd\":\"transfer/withdrawInfo\" } 交易(需要apikey) 下单 POST https://api.bibox.com/v1/orderpending cmd: orderpending/trade 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 pair true string 交易对 BIX_BTC, ETH_BTC, ... account_type true integer 账户类型 0-币币账户 order_type true integer 交易类型 2-限价单 order_side true integer 交易方向 1-买，2-卖 price true double 委托价格 最小值 0.00000001 amount true double 委托数量 最小值 0.0001 示例 // Request { \"cmd\": \"orderpending/trade\", \"index\": 12345, //随机数，批量时唯一标识某个cmd \"body\": { \"pair\": \"BIX_BTC\", //交易对, BIX_BTC, BIX_ETH, ... \"account_type\": 0, //账户类型，0-币币账户 \"order_type\": 2, //交易类型，2-限价单 \"order_side\": 1, //交易方向，1-买，2-卖 \"price\": 0.00032, //委托价格 \"amount\": 1000 //委托数量 } } { \"url\":\"https://api.bibox.com/v1/orderpending\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"orderpending/trade\\\",\\\"index\\\":12345,\\\"body\\\":{\\\"pair\\\":\\\"BIX_BTC\\\",\\\"account_type\\\":0,\\\"order_type\\\":2,\\\"order_side\\\":1,\\\"price\\\":0.00032,\\\"amount\\\":1000}}]\", \"apikey\":\"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\", \"sign\":\"2d775fdc61a2aaf63e9f40441c2040a8\" } } // Response { \"result\": \"100055558128036\", //返回委托单id \"index\": 12345, //用户自定义随机数 \"cmd\":\"orderpending/trade\" } 撤单 POST https://api.bibox.com/v1/orderpending cmd: orderpending/cancelTrade 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 orders_id true string 委托单id 示例 // Request { \"cmd\": \"orderpending/cancelTrade\", \"index\": 12345, //随机数，批量时唯一标识某个cmd \"body\": { \"orders_id\": \"8588285380268971\" //委托单id } } { \"url\":\"https://api.bibox.com/v1/orderpending\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"orderpending/cancelTrade\\\",\\\"index\\\":12345,\\\"body\\\":{\\\"orders_id\\\":\\\"8588285380268971\\\"}}]\", \"apikey\":\"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\", \"sign\":\"bf3882a208ada6ebc86a8cf8e3b5ea5a\" } } // Response { \"result\":\"OK\", //注意：该结果只表示服务器接收到撤单请求，撤销结果可查询订单记录 \"index\": 12345, //用户自定义随机数 \"cmd\":\"orderpending/cancelTrade\" } 当前委托 POST https://api.bibox.com/v1/orderpending cmd: orderpending/orderPendingList 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 pair false string 交易对 BIX_BTC, ETH_BTC, ... account_type true integer 账户类型 0-币币账户 order_side false integer 交易方向 1-买，2-卖 coin_symbol false string 交易币种 BIX, EOS, ... currency_symbol false string 定价币种 BTC, USDT, ... page true integer 第几页 从1开始 size true integer 每页数量 1-50 示例 // Request { \"cmd\": \"orderpending/orderPendingList\", \"body\": { \"account_type\": 0, \"order_side\": 2, \"page\": 1, \"size\": 10, \"coin_symbol\": \"LTC\", \"currency_symbol\": \"BTC\" } } { \"url\":\"https://api.bibox.com/v1/orderpending\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"orderpending/orderPendingList\\\",\\\"body\\\":{\\\"account_type\\\":0,\\\"order_side\\\":2,\\\"page\\\":1,\\\"size\\\":10,\\\"coin_symbol\\\":\\\"LTC\\\",\\\"currency_symbol\\\":\\\"BTC\\\"}}]\", \"apikey\":\"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\", \"sign\":\"15e0c711e4ad94b30245782147c9307f\" } } // Response { \"result\":{ \"count\":1, \"page\":1, \"items\":[ { \"id\":159, \"createdAt\": 1512756997000, \"account_type\":0, //账户类型 0-币币账户 \"coin_symbol\":\"LTC\", //交易币种 \"currency_symbol\":\"BTC\", //定价币种 \"order_side\":2, //交易方向，1-买，2-卖 \"order_type\":2, //订单类型，2-限价单 \"price\":\"0.00900000\", //委托价格，市价单是0 \"amount\":\"1.00000000\", //委托数量，市价买单是0 \"money\":\"0.00900000\", //委托金额，市价卖单是0 \"deal_amount\":\"0.00000000\", //已成交数量 \"deal_percent\":\"0.00%\", //成交百分比 \"unexecuted\":\"0.00000000\", //未成交数量 \"status\":1 //状态，-1 失败 0或1-待成交, 2-部分成交，3-完全成交，4-部分撤销，5-完全撤销，6-待撤销 } ] }, \"cmd\":\"orderpending/orderPendingList\" } 历史委托 POST https://api.bibox.com/v1/orderpending cmd: orderpending/pendingHistoryList 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 pair false string 交易对 BIX_BTC, ETH_BTC, ... account_type true integer 账户类型 0-币币账户 order_side false integer 交易方向 1-买，2-卖 coin_symbol false string 交易币种 BIX, EOS, ... currency_symbol false string 定价币种 BTC, USDT, ... hide_cancel false integer 隐藏已撤销订单 0-不隐藏，1-隐藏 page true integer 第几页 从1开始 size true integer 每页数量 1-50 示例 // Request { \"cmd\": \"orderpending/pendingHistoryList\", \"body\": { \"account_type\": 0, \"order_side\": 2, \"page\": 1, \"size\": 10, \"coin_symbol\": \"LTC\", \"currency_symbol\": \"BTC\" } } { \"url\":\"https://api.bibox.com/v1/orderpending\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"orderpending/pendingHistoryList\\\",\\\"body\\\":{\\\"account_type\\\":0,\\\"order_side\\\":2,\\\"page\\\":1,\\\"size\\\":10,\\\"coin_symbol\\\":\\\"LTC\\\",\\\"currency_symbol\\\":\\\"BTC\\\"}}]\", \"apikey\":\"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\", \"sign\":\"4e80fd525dbdebb74a60847308b50e37\" } } // Response { \"result\":{ \"count\":1, \"page\":1, \"items\":[ { \"id\":159, \"createdAt\": 1512756997000, \"account_type\":0, //账户类型 0-币币账户 \"coin_symbol\":\"LTC\", //交易币种 \"currency_symbol\":\"BTC\", //定价币种 \"order_side\":2, //交易方向，1-买，2-卖 \"order_type\":2, //订单类型，2-限价单 \"price\":\"0.00900000\", //委托价格，市价单是0 \"amount\":\"1.00000000\", //委托数量，市价买单是0 \"money\":\"0.00900000\", //委托金额，市价卖单是0 \"deal_price\":\"0.00900000\", //成交均价 \"deal_amount\":\"1.00000000\", //已成交数量 \"deal_money\":\"0.00900000\", //已成交金额 \"deal_percent\":\"100%\", //成交百分比 \"status\":3 //状态，-1 失败 0或1-待成交,2-部分成交，3-完全成交，4-部分撤销，5-完全撤销，6-待撤销 } ] }, \"cmd\":\"orderpending/pendingHistoryList\" } 成交记录 POST https://api.bibox.com/v1/orderpending cmd: orderpending/orderDetail 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 id true string 委托单id account_type true integer 账户类型 0-币币账户 示例 // Request { \"cmd\": \"orderpending/orderDetail\", \"body\": { \"id\": \"11221615825364891\" } } { \"url\":\"https://api.bibox.com/v1/orderpending\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"orderpending/orderDetail\\\",\\\"body\\\":{\\\"id\\\":\\\"11221615825364891\\\"}}]\", \"apikey\":\"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\", \"sign\":\"3eead4ae66c0767be2d87ac4105f0dee\" } } // Response { \"result\":{ \"sum\":\"0.00588746\", // 成交总额 \"orderList\":[ { \"id\":\"2251799813844119243\", // 成交记录ID \"createdAt\":1561007144000, // 成交时间 \"account_type\":0, // 币币账户 \"coin_symbol\":\"KAT\", // 交易币种 \"currency_symbol\":\"ETH\", // 定价币种 \"order_side\":2, //交易方向，1-买，2-卖 \"order_type\":2, //订单类型，1-市价单，2-限价单 \"price\":\"0.00001183\", //成交价格 \"amount\":\"497.6722\", //成交数量 \"money\":\"0.00588746\", //成交额 \"fee\":\"0.00000000\", //手续费 \"pay_bix\":0, //bix抵扣 0 未开启 1 开启 \"fee_symbol\":\"ETH\", //手续费币种 \"relay_id\":\"11221615825364891\", //关联订单id } ] }, \"cmd\":\"orderpending/orderDetail\" } 委托单详情 POST https://api.bibox.com/v1/orderpending cmd: orderpending/order 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 id true string 委托单id account_type true integer 账户类型 0-币币账户 示例 // Request { \"cmd\": \"orderpending/order\", \"body\": { \"id\": \"100055558128036\" } } { \"url\":\"https://api.bibox.com/v1/orderpending\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"orderpending/order\\\",\\\"body\\\":{\\\"id\\\":\\\"100055558128036\\\"}}]\", \"apikey\":\"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\", \"sign\":\"970983d6d8ddf9c0db5181d4ce7b744b\" } } // Response { \"result\":{ \"id\":\"100055558128036\", \"createdAt\": 1512756997000, \"account_type\":0, //账户类型 0-币币账户 \"pair\":\"LTC_BTC\", //交易对 \"coin_symbol\":\"LTC\", //交易币种 \"currency_symbol\":\"BTC\", //定价币种 \"order_side\":2, //交易方向，1-买，2-卖 \"order_type\":2, //订单类型，2-限价单 \"price\":\"0.00900000\", //委托价格，市价单是0 \"amount\":\"1.00000000\", //委托数量，市价买单是0 \"money\":\"0.00900000\", //委托金额，市价卖单是0 \"deal_amount\":\"0.00000000\", //已成交数量 \"deal_percent\":\"0.00%\", //成交百分比 \"unexecuted\":\"0.00000000\", //未成交数量 \"status\":1 //状态，-1 失败 0或1-待成交, 2-部分成交，3-完全成交，4-部分撤销，5-完全撤销，6-待撤销 }, \"cmd\":\"orderpending/order\" } 成交明细 POST https://api.bibox.com/v1/orderpending cmd: orderpending/orderHistoryList 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 pair false string 交易对 BIX_BTC, ETH_BTC, ... account_type true integer 账户类型 0-币币账户 order_side false integer 交易方向 1-买，2-卖 coin_symbol false string 交易币种 BIX, EOS, ... currency_symbol false string 定价币种 BTC, USDT, ... page true integer 第几页 从1开始 size true integer 每页数量 1-50 示例 // Request { \"cmd\": \"orderpending/orderHistoryList\", \"body\": { \"account_type\": 0, \"order_side\": 2, \"page\": 1, \"size\": 10, \"coin_symbol\": \"LTC\", \"currency_symbol\": \"BTC\" } } { \"url\":\"https://api.bibox.com/v1/orderpending\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"orderpending/orderHistoryList\\\",\\\"body\\\":{\\\"account_type\\\":0,\\\"order_side\\\":2,\\\"page\\\":1,\\\"size\\\":10,\\\"coin_symbol\\\":\\\"LTC\\\",\\\"currency_symbol\\\":\\\"BTC\\\"}}]\", \"apikey\":\"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\", \"sign\":\"443c8f691f9072c5c0bd3258f4ce89a1\" } } // Response { \"result\":{ \"count\":1, \"page\":1, //当前第几页 \"items\":[ //记录明细 { \"id\":\"100055558128033\", \"createdAt\": 1512756997000, \"account_type\":0, //账户类型 0-币币账户 \"coin_symbol\":\"LTC\", //交易币种 \"currency_symbol\":\"BTC\", //定价币种 \"order_side\":2, //交易方向，1-买，2-卖 \"order_type\":2, //订单类型，2-限价单 \"price\":\"0.00886500\", //成交价格 \"amount\":\"1.00000000\", //成交量 \"money\":\"0.00886500\", //成交额，单位是定价币种 \"fee\":0 //手续费 } ] }, \"cmd\":\"orderpending/orderHistoryList\" } Copyright © bibox.com 2019 all right reserved，powered by GitbookUpdate Date: 2019-11-12 "},"rest_api_transfer.html":{"url":"rest_api_transfer.html","title":"Restful API 资金划转","keywords":"","body":"Restful API 资金划转 资产查询(需要apikey) 钱包账户 POST https://api.bibox.com/v1/transfer cmd: transfer/mainAssets 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 select false integer 是否查询资产明细 不传-各币种总资产合计，1-请求所有币种资产明细 示例 // Request { \"cmd\":\"transfer/mainAssets\", \"body\":{ \"select\":1 } } { \"url\":\"https://api.bibox.com/v1/transfer\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"transfer/mainAssets\\\",\\\"body\\\":{\\\"select\\\":1}}]\", \"apikey\":\"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\", \"sign\":\"f035f70b6084613946f0944aa620d8a8\" } } // Response 成功 { \"result\":[ { \"result\":{ \"total_btc\":\"0.00034073\", //总资产折合当前BTC价值 \"total_cny\":\"18.44\", //总资产折合当前RMB价值 \"total_usd\":\"2.66\", //总资产折合当前USD价值 \"assets_list\":[ //资产明细列表 { \"coin_symbol\":\"BIX\", //币种 \"BTCValue\":\"0.00000000\", //折合BTC价值 \"CNYValue\":\"0.00\", //折合CNY价值 \"USDValue\":\"0.00\", //折合USD价值 \"balance\":\"0.00005540\", //可用金额 \"freeze\":\"0.00000000\" //冻结金额 }, ... ] }, \"cmd\":\"transfer/mainAssets\" } ] } 币币账户资产 参考链接 合约账户资产 参考链接 信用账户资产 POST https://api.bibox.com/v1/transfer cmd: transfer/creditAssets 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 select false integer 是否查询资产明细 不传-各币种总资产合计，1-请求所有币种资产明细 示例 // Request { \"cmd\":\"transfer/creditAssets\", \"body\":{ } } { \"url\":\"https://api.bibox.com/v1/transfer\", \"form\":{ \"cmds\":\"[{\\\"cmd\\\":\\\"transfer/creditAssets\\\",\\\"body\\\":{}}]\", \"apikey\":\"1e01c22ff8c59e9d98d93423817303f0e7c6d79d\", \"sign\":\"5fe1468b9d98f5b6879d8db1d46d766f\" } } // Response 成功 { \"result\":[ { \"result\":{ \"total_btc\":\"0.00063800\", //总资产折合当前BTC价值 \"total_cny\":\"34.55\", //总资产折合当前RMB价值 \"total_usd\":\"5.00\", //总资产折合当前USD价值 \"assets_list\":[ { \"balance\":\"0.00000000\", //可用余额 \"freeze\":\"0.00000000\", //冻结资产 \"BTCValue\":\"0.00000000\", //BTC估值 \"CNYValue\":\"0.00\", //RMB估值 \"USDValue\":\"0.00\", //USD估值 \"pair\":\"EOS_USDT\", //交易对 \"coin_symbol\":\"EOS\" //币种 }, { \"coin_symbol\":\"USDT\", \"pair\":\"EOS_USDT\", \"BTCValue\":\"0.00063800\", \"CNYValue\":\"34.55\", \"USDValue\":\"5.00\", \"balance\":\"5.00000000\", \"freeze\":\"0.00000000\" }, ... ] }, \"cmd\":\"transfer/creditAssets\" } ] } 钱包账户与币币账户互转(需要apikey) 钱包账户划转到币币账户 POST https://api.bibox.com/v2/assets/transfer/spot 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 symbol true string 交易对 ---- EOS,BTC... amount true double 转账金额 ---- > 0 type true integer 转账类型 ---- 0钱包转币币; 1币币转钱包 示例 // Request param: { \"type\": 0, \"amount\": \"100\", \"symbol\": 'USDT' } post body: { body: JSON.stringify(param), // 对param进行序列化 apikey: yourApiKey, sign: '用apisecret对序列化后的body进行签名' } yourApiKey = '178bed72cc7dcdca538b756817a87666432673af'; yourSecret = \"3e412e42957b720d155b2c8798726a0e8ed80807\"; post body: { body: \"{\\\"type\\\":0,\\\"amount\\\":\\\"100\\\",\\\"symbol\\\":\\\"USDT\\\"}\", apikey: \"178bed72cc7dcdca538b756817a87666432673af\", sign: \"a8ac84f2e6c2ead3dac4e46cf9c6e01e\", //用yourSecret对\"{\\\"type\\\":0,\\\"amount\\\":\\\"100\\\",\\\"symbol\\\":\\\"USDT\\\"}\"进行签名 } // Response 成功 { \"result\":{ \"id\":\"39030177501581312\", \"state\":0 // 成功 0 成功, 其他失败 } } // Response 失败 { \"error\":{ \"code\":\"2027\", \"msg\":\"可用余额不足\" } } 钱包账户与信用账户互转(需要apikey) 钱包账户划转到信用账户 POST https://api.bibox.com/v1/credit cmd: transferAssets/base2credit 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 coin_symbol true string 币种 ---- EOS,BTC... amount true double 转账金额 ---- > 0 pair true string 交易对 ---- EOS_USDT,BTC_USDT... 示例 // Request { \"cmd\":\"transferAssets/base2credit\", \"body\":{ \"coin_symbol\":\"USDT\", \"amount\":5, \"pair\":\"EOS_USDT\" } } // Response 成功 { \"result\":[ { \"result\":\"操作成功\", \"cmd\":\"transferAssets/base2credit\" } ] } 信用户划转到钱包账户 POST https://api.bibox.com/v1/credit cmd: transferAssets/credit2base 请求参数 参数名称 是否必须 类型 描述 默认值 取值范围 coin_symbol true string 币种 ---- EOS,BTC... amount true double 转账金额 ---- > 0 pair true string 交易对 ---- EOS_USDT,BTC_USDT...信用交易对 示例 // Request { \"cmd\":\"transferAssets/credit2base\", \"body\":{ \"coin_symbol\":\"USDT\", \"amount\":5, \"pair\":\"EOS_USDT\" } } // Response 成功 { \"result\":[ { \"result\":\"操作成功\", \"cmd\":\"transferAssets/credit2base\" } ] } 钱包账户与合约账户互转(需要apikey) 钱包账户划转到合约账户 参考链接 Copyright © bibox.com 2019 all right reserved，powered by GitbookUpdate Date: 2019-11-13 "},"restful_credit.html":{"url":"restful_credit.html","title":"Restful API 杠杆交易","keywords":"","body":"杠杆API列表 索引 获取自己的放贷信息 lendOrder/get 获取自己的借贷信息 borrowOrder/get 发起借贷 borrowOrder/book 取消借贷 borrowOrder/cancel 还款 borrowOrder/refund 获取自己的预定放贷信息 lendOrderbook/get 发布预定放贷信息 lendOrderbook/publish 撤销预定放贷信息 lendOrderbook/cancel 获取信用交易深度 borrowDepth/get 信用账户下单 trade/trade 信用账户撤单 trade/cancel 获取自己的放贷资产信息 transferAssets/lendAssets 获取信用账户资产 transferAssets/borrowAssets 获取自己的放贷信息 path: /v1/credit method: POST cmd: lendOrder/get 参数 类型 描述 page int 页数 size int 数据量 coin_symbol string 币种 status list 查询的放贷状态类型 请求: { \"cmd\":\"lendOrder/get\", \"body\":{ \"page\":1, \"status\":[ 0, 1 ], \"coin_symbol\":\"USDT\", \"size\":1 } } 响应: { \"result\": [ { \"result\": { \"count\": 2, \"page\": 1, \"items\": [ { \"id\": 14, \"user_id\": 8114202916, \"coin_id\": 60, \"coin_symbol\": \"USDT\", \"amount\": \"1000.00000000\", \"amount_receipt\": \"0.00000000\", \"interest_rate\": \"0.00200000\", \"insurance_rate\": \"0.10000000\", \"fee\": \"0.00000000\", \"insurance\": \"0.00000000\", \"interest\": \"2.33333324\", \"interest_receipt\": \"0.00000000\", \"period\": 7, \"expireAt\": \"2019-11-18T03:00:00.000Z\", \"status\": 0, \"createdAt\": \"2019-11-11T03:50:47.000Z\", \"days\": 1 } ], \"validSymbols\": [ \"USDT\" ] }, \"cmd\": \"lendOrder/get\" } ] } 获取自己的借贷信息 path: /v1/credit method: POST cmd: borrowOrder/get 参数名称 是否必须 类型 描述 默认值 取值范围 coin_symbol true string 交易币种 USDT, EOS, ... pair true string 交易对 BTC_USDT, ETH_USDT, ... status true integer或integerArray 订单状态 0未成交, 1借款成功, 2部分还款, 3-6已完成 page true integer 第几页 从1开始 size true integer 每页数量 1-50 请求: { \"cmd\":\"borrowOrder/get\", \"body\":{ \"page\":1, \"status\":[ 1, 2 ], \"size\":10, \"pair\":\"BTC_USDT\" } } 响应: { \"result\": [ { \"result\": { \"count\": 2, \"page\": 1, \"items\": [ { \"id\": 539354, \"user_id\": 8114202916, \"coin_id\": 60, \"coin_symbol\": \"USDT\", \"pair\": \"BTC_USDT\", \"amount\": \"406.00000000\", \"amount_refund\": \"0.00000000\", \"interest_rate\": \"0.00010000\", \"interest_rate_hour\": \"0.00000417\", \"interest\": \"0.26559180\", \"interest_refund\": \"0.00000000\", \"period\": 7, \"expireAt\": \"2019-11-15T11:00:00.000Z\", \"status\": 1, \"createdAt\": \"2019-11-08T11:53:15.000Z\" } ], \"validSymbols\": [ { \"coin_symbol\": \"USDT\", \"pair\": \"BTC_USDT\" } ] }, \"cmd\": \"borrowOrder/get\" } ] } 发起借贷 path: /v1/credit method: POST cmd: borrowOrder/book 参数名称 是否必须 类型 描述 默认值 取值范围 coin_symbol true string 交易币种 USDT, EOS, ... pair true string 交易对 BTC_USDT, ETH_USDT, ... amount false double 借款数量 interest_rate true double 借款利率 请求: { \"cmd\":\"borrowOrder/book\", \"body\":{ \"interest_rate\":0.0001, \"amount\":\"5\", \"coin_symbol\":\"EOS\", \"pair\":\"EOS_USDT\" } } 响应: { \"result\":\"操作成功\", \"cmd\":\"borrowOrder/book\" } 取消借贷 path: /v1/credit method: POST cmd: borrowOrder/cancel 参数名称 是否必须 类型 描述 默认值 取值范围 order_id true integer 订单id 请求: { \"cmd\":\"borrowOrder/cancel\", \"body\":{ \"order_id\":2809 } } 响应: { \"result\":\"操作成功\", \"cmd\":\"borrowOrder/cancel\" } 还款 path: /v1/credit method: POST cmd: borrowOrder/refund 参数名称 是否必须 类型 描述 默认值 取值范围 order_id true integer 借款单id amount true double 还款数量 请求: { \"cmd\":\"borrowOrder/refund\", \"body\":{ \"order_id\":1, \"amount\":\"5.0036\" } } 响应: { \"result\":\"操作成功\", \"cmd\":\"borrowOrder/refund\" } 获取自己的预定放贷信息 path: /v1/credit method: POST cmd: lendOrderbook/get 参数名称 是否必须 类型 描述 默认值 取值范围 coin_symbol true string 交易币种 USDT, EOS, ... status true integer或integerArray 订单状态 0未成交, 1部分成交, 2已完成 page true integer 第几页 从1开始 size true integer 每页数量 1-50 请求: { \"cmd\":\"lendOrderbook/get\", \"body\":{ \"page\":1, \"status\":[ 0, 1 ], \"coin_symbol\":\"EOS\", \"size\":50 } } 响应: { \"result\":{ \"count\":1, \"page\":1, \"items\":[ { \"id\":1, \"user_id\":10000000, \"coin_id\":61, \"coin_symbol\":\"EOS\", \"amount\":5, // 待成交数量 \"amount_finish\":0, // 已成交数量 \"interest_rate\":0.001, // 利率 \"period\":7, \"expireAt\":\"2018-12-29T10:59:18.000Z\", \"status\":0, \"createdAt\":\"2018-12-22T10:59:18.000Z\" } ], \"validSymbols\":[ \"EOS\" ] }, \"cmd\":\"lendOrderbook/get\" } 发布预定放贷信息 path: /v1/credit method: POST cmd: lendOrderbook/publish 参数名称 是否必须 类型 描述 默认值 取值范围 coin_symbol true string 交易币种 USDT, EOS, ... amount true double 放款数量 interest_rate true double 放款利率 is_insurance true integer 是否开启保险 0或1 force true integer 1 请求: { \"cmd\":\"lendOrderbook/publish\", \"body\":{ \"coin_symbol\":\"EOS\", \"amount\":\"5\", \"interest_rate\":0.001, \"is_insurance\":1, \"force\":1 } } 响应: { \"result\":\"操作成功\", \"cmd\":\"lendOrderbook/publish\" } 撤销预定放贷信息 path: /v1/credit method: POST cmd: lendOrderbook/cancel 参数名称 是否必须 类型 描述 默认值 取值范围 orderbook_id true integer 订单id 请求: { \"cmd\":\"lendOrderbook/cancel\", \"body\":{ \"orderbook_id\":9064 } } 响应: { \"result\":\"操作成功\", \"cmd\":\"lendOrderbook/cancel\" } 获取信用交易深度 path: /v1/credit method: POST cmd: borrowDepth/get 参数名称 是否必须 类型 描述 默认值 取值范围 coin_symbol true string 交易币种 USDT, EOS, ... pair true string 交易对 BTC_USDT, ETH_USDT, ... 请求: { \"cmd\":\"borrowDepth/get\", \"body\":{ \"coin_symbol\":\"EOS\", \"pair\":\"EOS_USDT\" } } 响应: { \"result\":{ \"lend\":[ // 放款深度 { \"interest_rate\":\"0.07\", //放款利率 \"total\":\"5.20000000\", // 放款数量 \"number\":1 }, { \"interest_rate\":\"0.08\", \"total\":\"21657.73800000\", \"number\":19 } ], \"borrow\":[// 借款深度 { \"interest_rate\":\"0.01\", // 借款利率 \"total\":\"5.00000000\", // 借款数量 \"number\":1 } ], \"history\":[// 成交历史 { \"interest_rate\":0.0008, \"amount\":\"26.480\", \"createdAt\":\"2018-12-19T22:05:21.000Z\" }, { \"interest_rate\":0.0008, \"amount\":\"6000.000\", \"createdAt\":\"2018-12-19T10:24:27.000Z\" } ] }, \"cmd\":\"borrowDepth/get\" } 信用账户下单 path: /v1/credit method: POST cmd: trade/trade 参数 类型 描述 pair string 交易对 account_type integer 账户类型 1-信用账户 order_type integer 交易类型 2-限价单 order_side integer 交易方向 1-买，2-卖 price string 委托价格 最小值 0.00000001 amount string 委托数量 最小值 0.0001 money string 委托金额 请求: { \"cmd\":\"trade/trade\", \"body\":{ \"account_type\":1, \"pair\":\"BTC_USDT\", \"order_type\":2, \"price\":\"100\", \"amount\":\"1\", \"money\":\"100.0000\", \"order_side\":1 } } 响应: { \"result\": [ { \"result\": 1, \"cmd\": \"trade/trade\" } ] } 信用账户撤单 path: /v1/credit method: POST cmd: trade/cancel 参数名称 是否必须 类型 描述 默认值 取值范围 orders_id true string 委托单id 请求: { \"cmd\": \"trade/cancel\", \"body\": { \"orders_id\": \"4631142976192513\" //委托单id } } 响应: { \"result\":\"ok\", \"cmd\":\"trade/cancel\" } 获取自己的放贷资产信息 path: /v1/credit method: POST cmd: transferAssets/lendAssets 参数名称 是否必须 类型 描述 默认值 取值范围 coin_symbol true string 交易币种 USDT, EOS, ... 请求: { \"cmd\":\"transferAssets/lendAssets\", \"body\":{ \"coin_symbol\":\"EOS\" } } 响应: { \"result\":{ \"balance\":\"1.52319980\", // 可用余额 \"lend\":\"0.00000000\", // 待收贷款数量 \"lend_book\":\"0.00000000\", // 预订贷款数量 \"interest\":\"0.00000000\", // 待收利息 \"lend_receipt\":\"1.44000000\", // 已收贷款数量 \"interest_receipt\":\"0.16115200\" // 已收利息 }, \"cmd\":\"transferAssets/lendAssets\" } 获取信用账户资产 path: /v1/credit method: POST cmd: transferAssets/borrowAssets 参数名称 是否必须 类型 描述 默认值 取值范围 coin_symbol true string 交易币种 BTC, EOS, ... currency_symbol true string 定价币种 USDT 请求: { \"cmd\":\"transferAssets/borrowAssets\", \"body\":{ \"coin_symbol\":\"BTC\", \"currency_symbol\":\"USDT\", \"asset_type\": \"cross\", //cross, isolated \"full\":0 // 废弃 } } 响应: { \"result\": [ { \"result\": { \"pair\": \"BTC_USDT\", \"currency_deposit\": \"8406.00000000\", \"currency_borrow\": \"506.34642529\", \"currency_can_borrow\": \"70590.53574710\", \"currency_borrow_book\": \"0\", \"margin_radio\": \"1660.13\", \"leverage_ratio\": 3, //杠杆倍数(废弃) \"max_leverage_ratio\": 10, //最大支持杠杆倍数(新) \"force_price\": \"0\", \"bust_price\": \"0\", \"items\": [ { \"coin_symbol\": \"BTC\", \"coin_id\": 42, \"balance\": \"0.00000000\", \"freeze\": \"0.00000000\", \"borrow\": \"0\", \"can_transfer_credit\": \"0.00000000\", \"can_transfer_main\": \"0\", \"can_borrow\": \"8.82381696\", \"borrow_book\": \"0\", \"force_price\": \"0\", \"bust_price\": \"0\", \"price\": \"8000\", \"interest\": \"0\", \"total\": \"0.00000000\" }, { \"coin_symbol\": \"USDT\", \"coin_id\": 60, \"balance\": \"8406.00000000\", \"freeze\": \"0.00000000\", \"borrow\": \"506.34642529\", \"can_transfer_credit\": \"7494.57643447\", \"can_transfer_main\": \"5000.00000000\", \"can_borrow\": \"70590.53574710\", \"borrow_book\": \"0\", \"force_price\": \"0\", \"bust_price\": \"0\", \"price\": \"1\", \"interest\": \"0.34642529\", \"total\": \"8406.00000000\" } ], \"current_leverage_radio\": \"2\", //当前杠杆倍数(新) \"force_deal_radio\": 110, //爆仓保证金率(新) \"alert_radio\": 115, //报警保证金率(新) \"safe_radio\": 200 //强平之后的保证金率(新) }, \"cmd\": \"transferAssets/borrowAssets\" } ] } Copyright © bibox.com 2019 all right reserved，powered by GitbookUpdate Date: 2019-11-13 "},"ws_api_intro.html":{"url":"ws_api_intro.html","title":"WebSocket API 说明","keywords":"","body":"WebSocket API 说明 WebSocket API简介 WebSocket协议是基于TCP的一种新的网络协议。它实现了客户端与服务器之间在单个 tcp 连接上的全双工通信，由服务器主动发送信息给客户端，减少了频繁的身份验证等不必要的开销。其最大优点有两个： 两方请求的 header 数据很小，大概只有2 Bytes。 服务器不再是被动的接到客户端的请求后才返回数据，而是有了新数据后主动推送给客户端。 以上 WebSocket 协议带来的优点使得其十分适用于数字货币行情和交易这种实时性强的接口。 注意：WebSocket 目前只支持行情查询，交易接口将在后续提供。 访问地址 Bibox行情请求地址：wss://push.bibox.com/ 请求与订阅说明 1. 访问地址 Bibox行情请求地址：wss://push.bibox.com/ 限速策略：为提高数据并发处理性能，一个Websocket连接允许最多20个channel订阅，如果您有大量订阅的需求，可以创建多个Websocket连接。 2. 数据压缩 WebSocket API 返回的所有数据都进行了 GZIP 压缩，需要 client 在收到数据之后解压，推荐使用pako。（【pako】 是一个支持压缩和解压 GZIP 的库） 注：Server对压缩的数据进行一次BASE64编码，Client解压前需要先解码BASE64. 解压缩例子 (nodejs实现) let data = msg.data; // from Server let text = pako.inflate(Buffer.from(data, 'base64'), { to: 'string' }); let recvMsg = JSON.parse(text); // raw data 3. WebSocket库 【ws】 是 Node.js 下的 WebSocket 库。 4. 心跳 WebSocket API 支持双向心跳，无论是 Server 还是 Client 都可以发起 ping message，对方返回 pong message。 WebSocket Server 发送心跳： {\"ping\": 1536743613834} WebSocket Client 会返回： {\"pong\": 1536743613834} 注：返回的数据里 \"pong\" 的值为收到的 \"ping\" 的值 注：WebSocket Client 和 WebSocket Server 建立连接之后，WebSocket Server 每隔 10s（这个频率可能会变化）会向 WebSocket Client 发起一次心跳，WebSocket Client 忽略心跳2次后，WebSocket Server 将会主动断开连接。 ┌────────┐ ┌────────┐ │ Client │ │ Server │ └───┬────┘ └───┬────┘ │ {\"ping\": 1536743613834} │ ││ │ │ 注：WebSocket Client 发送最近2次心跳 message 中的其中一个 \"ping\" 的值，WebSocket Server 都会保持 WebSocket 连接 ┌────────┐ ┌────────┐ │ Client │ │ Server │ └───┬────┘ └───┬────┘ │ {\"ping\": 1523778470416} │ │注：WebSocket Client 忽略心跳2次后，WebSocket Server 将会主动断开连接。 WebSocket Client 发送心跳： {\"ping\": 1536743614839} WebSocket Server 会返回： {\"pong\": 1536743614839} 注：返回的数据里面的 \"pong\" 的值为收到的 \"ping\" 的值 注：如果Client发送 ping message n次（n由Client自定义）都没有收到 pong message，Client需要断开 Websocket，重新连接。 注：如果Client连接频繁被Server断开，请检查Client是否回复pong message，确保Client能正常回应Server发起的ping message。 5. channel格式 订阅数据使用 channel，语法如下 channel 类型 channel 语法 描述 Kline biboxsub_spot$pairkline$period K线数据，包含单位时间区间的开盘价、最高价、最低价、收盘价、成交量，$period 可选值：{ 1min, 5min, 15min, 30min, 1hour, 2hour, 4hour, 6hour, 12hour, day, 1mon, week } Market bibox_sub_spot_ALL_ALL_market 行情信息，包含所有交易对最新价、24h最高价、24最低价、24h成交量等信息 Depth biboxsub_spot$pair_depth 盘口深度，返回最新200条买卖深度信息 Ticker biboxsub_spot$pair_ticker 市场ticker，返回指定交易对最新价、买一价、卖一价、买一委托量、卖一委托量等信息 Deals biboxsub_spot$pair_deals 成交记录，包含成交价格、成交量、成交方向等信息 $pair 为交易对，必须大写，可选值： { BIX_BTC, BIX_ETH, BTC_USDT, ETH_USDT...... } 6. 订阅数据(addChannel) 订阅数据(addChannel)以及接收订阅数据的大致流程 ┌────────┐ ┌────────┐ │ Client │ │ Server │ └───┬────┘ └───┬────┘ │ {\"event\": \"addChannel\", | | \"channel\": \"xxx channel\"} │ ├─────────────────────────────────>│ | | │ {\"channel\": \"xxx channel\", | | \"data\": \"data of channel\"}│ │注：订阅 channel 成功之后，当 channel 对应的数据有更新时，Server 按一定的频率把 channel 对应的新数据推送给 Client 订阅数据的格式 成功建立和 WebSocket API 的连接之后，向 Server 发送如下格式的数据来订阅数据 { \"event\": \"addChannel\", \"channel\": \"channel to sub\" } 正确订阅的例子 正确订阅 { \"event\": \"addChannel\", \"channel\": \"bibox_sub_spot_BIX_BTC_kline_1min\" } \"channel\" 的值为 channel ，请参考 \"5. channel格式\" 的 channel 格式 订阅成功返回数据的例子 [{ \"channel\": \"bibox_sub_spot_BIX_BTC_kline_1min\", \"data_type\": 0, //订阅成功返回一次全量数据，之后返回增量 \"data\": [ { \"time\":1536310020000, \"open\":\"0.00006614\", \"high\":\"0.00006659\", \"low\":\"0.00006604\", \"close\":\"0.00006652\", \"vol\":\"74056.89597166\" }, { \"time\":1536310080000, \"open\":\"0.00006652\", \"high\":\"0.00006652\", \"low\":\"0.00006652\", \"close\":\"0.00006652\", \"vol\":\"100\" } ] }] \"data_type\" 标识返回的数据是全量还是增量，0-返回全量数据，1-返回增量数据 data 说明 \"data\": { \"time\": k线某周期开始时间, \"count\": 成交笔数, \"open\": 开盘价, \"high\": 最高价, \"low\": 最低价, \"close\": 收盘价 \"vol\": 成交量 } 之后每当 Kline 有更新时，client 会收到数据，例子 [{ \"channel\": \"bibox_sub_spot_BIX_BTC_kline_1min\", \"data_type\": 1, \"data\": [ { \"time\":1536310020000, \"open\":\"0.00006614\", \"high\":\"0.00006659\", \"low\":\"0.00006604\", \"close\":\"0.00006652\", \"vol\":\"74056.89597166\" }, { \"time\":1536310080000, \"open\":\"0.00006652\", \"high\":\"0.00006652\", \"low\":\"0.00006652\", \"close\":\"0.00006652\", \"vol\":\"100\" } ] }] 注：返回增量k线时，每次都返回最新相邻两条kline 错误订阅的例子 错误订阅（错误的 pair，大小写敏感） { \"event\": \"addChannel\", \"channel\": \"bibox_sub_spot_bix_btc_kline_1min\" } 订阅失败返回数据的例子 { \"channel\": \"bibox_sub_spot_bix_btc_kline_1min\", \"error\": { \"code\": \"3009\", \"msg\":\"推送订阅channel不合法\" } } 7. 取消订阅(removeChannel) 取消订阅的格式 WebSocket Client 订阅数据之后，可以取消订阅，取消订阅之后 WebSocket Server 将不会再发送该 channel 的数据，取消订阅的格式如下 { \"event\": \"removeChannel\", \"channel\": \"xxx channel\" } 正确取消订阅的例子 正确取消订阅的例子 { \"event\": \"removeChannel\", \"channel\": \"bibox_sub_spot_BIX_BTC_kline_1min\" } Copyright © bibox.com 2019 all right reserved，powered by GitbookUpdate Date: 2019-11-13 "},"ws_api_sub.html":{"url":"ws_api_sub.html","title":"WebSocket API 订阅","keywords":"","body":"WebSocket API 订阅 订阅 Kline 数据 channel: biboxsub_spot$pairkline$period 成功建立和 WebSocket API 的连接之后，向 Server 发送如下格式的数据来订阅数据 { \"event\": \"addChannel\", \"channel\": \"bibox_sub_spot_$pair_kline_$period\" } 参数名称 是否必须 类型 描述 默认值 取值范围 pair true string 交易对 BIX_BTC, BIX_ETH, BTC_USDT, ETH_USDT ...... period true string K线周期 1min, 5min, 15min, 30min, 1hour, 2hour, 4hour, 6hour, 12hour, day, week 正确订阅的例子 正确订阅 { \"event\": \"addChannel\", \"channel\": \"bibox_sub_spot_BIX_BTC_kline_1min\" } 订阅成功返回数据的例子 [{ \"channel\": \"bibox_sub_spot_BIX_BTC_kline_1min\", \"data_type\": 0, //订阅成功返回一次全量数据，之后返回增量 \"data\": [ { \"time\":1536310020000, \"open\":\"0.00006614\", \"high\":\"0.00006659\", \"low\":\"0.00006604\", \"close\":\"0.00006652\", \"vol\":\"74056.89597166\" }, { \"time\":1536310080000, \"open\":\"0.00006652\", \"high\":\"0.00006652\", \"low\":\"0.00006652\", \"close\":\"0.00006652\", \"vol\":\"100\" } ] }] \"data_type\" 标识返回的数据是全量还是增量，0-返回全量数据，1-返回增量数据 data 说明 \"data\": { \"time\": k线某周期开始时间, \"count\": 成交笔数, \"open\": 开盘价, \"high\": 最高价, \"low\": 最低价, \"close\": 收盘价 \"vol\": 成交量 } 之后每当 KLine 有更新时，client 会收到数据，例子 [{ \"channel\": \"bibox_sub_spot_BIX_BTC_kline_1min\", \"data_type\": 1, \"data\": [ { \"time\":1536310020000, \"open\":\"0.00006614\", \"high\":\"0.00006659\", \"low\":\"0.00006604\", \"close\":\"0.00006652\", \"vol\":\"74056.89597166\" }, { \"time\":1536310080000, \"open\":\"0.00006652\", \"high\":\"0.00006652\", \"low\":\"0.00006652\", \"close\":\"0.00006652\", \"vol\":\"100\" } ] }] 注：返回增量k线时，每次都返回最新相邻两条kline 错误订阅的例子 错误订阅（错误的 pair，大小写敏感） { \"event\": \"addChannel\", \"channel\": \"bibox_sub_spot_bix_btc_kline_1min\" } 订阅失败返回数据的例子 { \"channel\": \"bibox_sub_spot_bix_btc_kline_1min\", \"error\": { \"code\": \"3009\", \"msg\":\"推送订阅channel不合法\" } } 订阅 Market 数据 channel: bibox_sub_spot_ALL_ALL_market 成功建立和 WebSocket API 的连接之后，向 Server 发送如下格式的数据来订阅数据 { \"event\": \"addChannel\", \"channel\": \"bibox_sub_spot_ALL_ALL_market\" } 正确订阅 { \"event\": \"addChannel\", \"channel\": \"bibox_sub_spot_ALL_ALL_market\" } 订阅成功返回数据的例子 [{ \"channel\": \"bibox_sub_spot_ALL_ALL_market\", \"data_type\": 0, \"data\": [ { \"id\":1, \"coin_symbol\":\"BIX\", \"currency_symbol\":\"BTC\", \"last\":\"0.00006604\", \"high\":\"0.00006712\", \"low\":\"0.00006421\", \"change\":\"+0.00000121\", \"percent\":\"+1.87%\", \"vol24H\":\"54475636\", \"amount\":\"3571.11\", \"last_cny\":\"2.91\", \"high_cny\":\"2.95\", \"low_cny\":\"2.83\", \"last_usd\":\"0.42\", \"high_usd\":\"0.43\", \"low_usd\":\"0.41\" }, { \"id\":2, \"coin_symbol\":\"BIX\", \"currency_symbol\":\"ETH\", \"last\":\"0.00190235\", \"high\":\"0.00192190\", \"low\":\"0.00181724\", \"change\":\"+0.00008058\", \"percent\":\"+4.42%\", \"vol24H\":\"32059017\", \"amount\":\"59861.18\", \"last_cny\":\"2.90\", \"high_cny\":\"2.93\", \"low_cny\":\"2.77\", \"last_usd\":\"0.42\", \"high_usd\":\"0.42\", \"low_usd\":\"0.40\" }, ... //其他交易对行情信息 ] }] data 说明 { \"id\": 交易对id \"coin_symbol\": 交易币种 \"currency_symbol\": 定价币种 \"last\": 24h最新价 \"high\": 24h最高价 \"low\": 24h最低价 \"change\": 24h涨跌 \"percent\": 24h涨跌幅 \"vol24H\": 24h成交量 \"amount\": 24h成交额 \"last_cny\": 最新价折算cny \"high_cny\": 最高价折算cny \"low_cny\": 最低价折算cny \"last_usd\": 最新价折算usd \"high_usd\": 最高价折算usd \"low_usd\": 最低价折算usd } 之后每当 Market 有更新时，client 会收到数据，例子 [{ \"channel\": \"bibox_sub_spot_ALL_ALL_market\", \"data_type\": 1, \"data\": [ { \"id\":1, \"coin_symbol\":\"BIX\", \"currency_symbol\":\"BTC\", \"last\":\"0.00006604\", \"high\":\"0.00006712\", \"low\":\"0.00006421\", \"change\":\"+0.00000121\", \"percent\":\"+1.87%\", \"vol24H\":\"54475636\", \"amount\":\"3571.11\", \"last_cny\":\"2.91\", \"high_cny\":\"2.95\", \"low_cny\":\"2.83\", \"last_usd\":\"0.42\", \"high_usd\":\"0.43\", \"low_usd\":\"0.41\" } ] }] 请求 Depth 数据 channel: biboxsub_spot$pair_depth 成功建立和 WebSocket API 的连接之后，向 Server 发送如下格式的数据来订阅数据 { \"event\": \"addChannel\", \"channel\": \"bibox_sub_spot_$pair_depth\" } 参数名称 是否必须 类型 描述 默认值 取值范围 pair true string 交易对 BIX_BTC, BIX_ETH, BTC_USDT, ETH_USDT...... 请求 Depth 数据的例子 正确订阅 { \"event\": \"addChannel\", \"channel\": \"bibox_sub_spot_BIX_BTC_depth\" } 订阅成功返回数据的例子 [{ \"channel\": \"bibox_sub_spot_BIX_BTC_depth\", \"data_type\": 0, \"data\": { \"pair\":\"BIX_BTC\", \"update_time\":1536648343927, \"asks\":[ { \"price\":\"0.0000683\", \"volume\":\"1048.8046\" }, { \"price\":\"0.00006831\", \"volume\":\"1008.2509\" }, ... // other data ], \"bids\":[ { \"price\":\"0.00006801\", \"volume\":\"2.3472\" }, { \"price\":\"0.00006793\", \"volume\":\"0.3458\" }, ... // other data ] } }] data说明 \"bids\": 买方深度列表 \"asks\": 卖方深度列表 { \"price\": 委托价格, \"volume\": 委托数量 } 之后每当 Depth 有更新时，client 都会收到全量数据，例子 [{ \"channel\": \"bibox_sub_spot_BIX_BTC_depth\", \"data_type\": 1, \"data\": { \"pair\":\"BIX_BTC\", \"update_time\":1536648343927, \"asks\":[ { \"price\":\"0.0000683\", \"volume\":\"1048.8046\" }, { \"price\":\"0.00006831\", \"volume\":\"1008.2509\" }, ... // other data ], \"bids\":[ { \"price\":\"0.00006801\", \"volume\":\"2.3472\" }, { \"price\":\"0.00006793\", \"volume\":\"0.3458\" }, ... // other data ] } }] 订阅 Deals 数据 channel: biboxsub_spot$pair_deals { \"event\": \"addChannel\", \"channel\": \"bibox_sub_spot_$pair_deals\" } 参数名称 是否必须 类型 描述 默认值 取值范围 pair true string 交易对 BIX_BTC, BIX_ETH, BTC_USDT, ETH_USDT...... 请求 Deals 数据的例子 正确订阅 { \"event\": \"addChannel\", \"channel\": \"bibox_sub_spot_BIX_BTC_deals\" } 订阅成功返回数据的例子 [{ \"channel\": \"bibox_sub_spot_BIX_BTC_deals\", \"data_type\": 0, \"data\":[ { \"id\":71890943, \"pair\":\"BIX_BTC\", \"price\":\"0.00006788\", \"amount\":\"9705.9732\", \"time\":1536648308000, \"side\":2 }, { \"id\":71890942, \"pair\":\"BIX_BTC\", \"price\":\"0.00006788\", \"amount\":\"11914.8712\", \"time\":1536648308000, \"side\":2 }, ... // other data ] }] data说明 { \"id\": 成交历史id, \"pair\": 交易对, \"price\": 成交均价, \"amount\": 成交数量, \"time\": 成交时间戳, \"side\": taker（主动成交方）成交方向，1-买，2-卖 } 之后每当 Deals 有更新时，client 都会收到增量数据，例子 [{ \"channel\": \"bibox_sub_spot_BIX_BTC_depth\", \"data_type\": 1, \"data\":[ { \"price\":\"0.00006788\", \"amount\":\"9705.9732\", \"time\":1536648308000, \"side\":2 }, { \"price\":\"0.00006788\", \"amount\":\"11914.8712\", \"time\":1536648308000, \"side\":2 }, ... // other data ] }] 订阅 Ticker 数据 channel: biboxsub_spot$pair_ticker { \"event\": \"addChannel\", \"channel\": \"bibox_sub_spot_$pair_ticker\" } 参数名称 是否必须 类型 描述 默认值 取值范围 pair true string 交易对 BIX_BTC, BIX_ETH, BTC_USDT, ETH_USDT...... 请求 Ticker 数据的例子 正确订阅 { \"event\": \"addChannel\", \"channel\": \"bibox_sub_spot_BIX_BTC_ticker\" } 订阅成功返回数据的例子 [{ \"channel\": \"bibox_sub_spot_BIX_BTC_ticker\", \"data_type\": 0, \"data\":{ \"pair\":\"BIX_BTC\", \"last\":\"0.00006837\", \"last_usd\":\"0.43\", \"last_cny\":\"2.96\", \"high\":\"0.00007401\", \"low\":\"0.00006628\", \"buy\":\"0.00006814\", \"buy_amount\":\"2654.5376\", \"sell\":\"0.00006876\", \"sell_amount\":\"170.3094\", \"vol\":\"48027601\", \"percent\":\"-6.73%\", \"timestamp\":1536650154258, \"base_last_cny\":\"2.96838961\" } }] data说明 \"data\":{ \"pair\": 交易对 \"last\": 最新成交价 \"last_cny\": 最新成交价，cny计价 \"last_usd\": 最新成交价，usd计价 \"high\": 24h最高价 \"low\": 24h最低价 \"buy\": 最新买一价 \"buy_amount\": 买一量 \"sell\": 最新卖一价 \"sell_amount\": 卖一量 \"vol\": 24h成交量 \"percent\": 24h涨跌幅 \"timestamp\": 时间戳 \"base_last_cny\": 最新成交价，cny计价（保留8位小数） } 之后每当 Ticker 有更新时，client 都会收到数据，例子 [{ \"channel\": \"bibox_sub_spot_BIX_BTC_ticker\", \"data_type\": 1, \"data\":{ \"pair\":\"BIX_BTC\", \"last\":\"0.00006837\", \"last_usd\":\"0.43\", \"last_cny\":\"2.96\", \"high\":\"0.00007401\", \"low\":\"0.00006628\", \"buy\":\"0.00006814\", \"buy_amount\":\"2654.5376\", \"sell\":\"0.00006876\", \"sell_amount\":\"170.3094\", \"vol\":\"48027601\", \"percent\":\"-6.73%\", \"timestamp\":1536650154258, \"base_last_cny\":\"2.96838961\" } }] 订阅 Login 数据 channel: bibox_sub_spot_ALL_ALL_login { \"event\": \"addChannel\", \"channel\": \"bibox_sub_spot_ALL_ALL_login\", \"apikey\": \"thisisyourapikey\", \"sign\": \"thisissigneddata\" } 参数名称 是否必须 类型 描述 默认值 取值范围 apikey true string 您在Bibox交易所申请的apikey sign true string 使用您在Bibox交易所申请的apisecret对整个请求数据进行签名 注：订阅Login会推送与用户有关的消息，包括：资产，委托单，成交历史 签名步骤 1.签名前数据 { \"event\": \"addChannel\", \"channel\": \"bibox_sub_spot_ALL_ALL_login\", \"apikey\": \"thisisyourapikey\" } 2.根据key升序排列 { \"apikey\": \"thisisyourapikey\", \"channel\": \"bibox_sub_spot_ALL_ALL_login\", \"event\": \"addChannel\" } 3.格式化待签名数据并签名 let data = { \"apikey\": \"thisisyourapikey\", \"channel\": \"bibox_sub_spot_ALL_ALL_login\", \"event\": \"addChannel\" }; let secret = \"thisisyourapisecret\"; let sign = CryptoJS.HmacMD5(JSON.stringify(data), secret).toString(); // 签名结果 thisissigneddata 4.添加签名结果到请求参数 { \"event\": \"addChannel\", \"channel\": \"bibox_sub_spot_ALL_ALL_login\", \"apikey\": \"thisisyourapikey\", \"sign\": \"thisissigneddata\" } 完整签名例子 nodejs实现 let CryptoJS = require(\"crypto-js\"); function getSign(data) { let secret = \"your apisecret\"; let sdic = Object.keys(data).sort();//sort in ascending let dataTmp = {}; for(let ki in sdic){ dataTmp[sdic[ki]] = data[sdic[ki]]; } return CryptoJS.HmacMD5(JSON.stringify(dataTmp), secret).toString(); } let data = { \"event\": \"addChannel\", \"channel\": 'bibox_sub_spot_ALL_ALL_login', \"apikey\": \"your apikey\" }; let sign = getSign(data);//return the signed data data.sign = sign; 请求 Login 数据的例子 正确订阅 { \"event\": \"addChannel\", \"channel\": \"bibox_sub_spot_ALL_ALL_login\", \"apikey\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", \"sign\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" } 订阅成功返回 [{ \"channel\": \"bibox_sub_spot_ALL_ALL_login\", \"data_type\": 0, \"data\":{ result: '订阅成功' } }] 之后每当 用户资产、委托单、成交历史 有更新时，client 都会收到数据，例子 现货账户资产 关键字 credit --> normal [{ \"channel\":\"bibox_sub_spot_ALL_ALL_login\", \"binary\":\"0\", //是否推送压缩数据，0-不压缩，1-压缩 \"data_type\":1, \"data\":{ \"assets\":{ //资产类型 \"normal\":{ //现货账户资产 \"BIX\":{ \"balance\":\"497.59601765\", //可用资产 \"freeze\":\"0.00000000\" //冻结资产 }, \"USDT\":{ \"balance\":\"20.52027574\", \"freeze\":\"22.12000000\" } } } } }] 信用账户资产 关键字 assets --> credit [{ \"channel\":\"bibox_sub_spot_ALL_ALL_login\", \"binary\":\"0\", \"data_type\":1, \"data\":{ \"assets\":{ //资产类型 \"credit\":{ //信用账户资产 \"BIX_USDT\":{ //交易对 \"BIX\":{ \"balance\":\"681.74441804\", //可用资产 \"freeze\":\"0.00000000\" //冻结资产 }, \"USDT\":{ \"balance\":\"0.21698199\", \"freeze\":\"0.00000000\" } }, \"BTC_USDT\":{ \"BTC\":{ \"balance\":\"100\", \"freeze\":\"0.00000000\" }, \"USDT\":{ \"balance\":\"10\", \"freeze\":\"0.00000000\" } } } } } }] 注：信用账户资产以交易对区分，不同交易对下的相同币种（比如BIX_USDT与BTC_USDT的相同币种USDT）互不相关。 现货委托单 关键字 orderpending [{ \"channel\":\"bibox_sub_spot_ALL_ALL_login\", \"binary\":\"0\", \"data_type\":1, \"data\":{ \"orderpending\":{ //委托单类型 \"id\":159, \"createdAt\": 1512756997000, \"account_type\":0, //账户类型 0-普通账户 \"coin_symbol\":\"LTC\", //交易币种 \"currency_symbol\":\"BTC\", //定价币种 \"order_side\":2, //交易方向，1-买，2-卖 \"order_type\":2, //订单类型，2-限价单 \"price\":\"0.00900000\", //委托价格，市价单是0 \"amount\":\"1.00000000\", //委托数量，市价买单是0 \"money\":\"0.00900000\", //委托金额，市价卖单是0 \"deal_amount\":\"0.00000000\", //已成交数量 \"deal_percent\":\"0.00%\", //成交百分比 \"unexecuted\":\"0.00000000\", //未成交数量 \"status\":1 //状态，1-待成交，2-部分成交，3-完全成交，4-部分撤销，5-完全撤销，6-待撤销 } } }] 现货成交历史 关键字 history [{ \"channel\":\"bibox_sub_spot_ALL_ALL_login\", \"binary\":\"0\", \"data_type\":1, \"data\":{ \"history\":{ //成交历史 \"id\":\"128345653242332\", \"createdAt\": 1512756997000, \"account_type\":0, //账户类型 0-普通账户 \"coin_symbol\":\"LTC\", //交易币种 \"currency_symbol\":\"BTC\", //定价币种 \"order_side\":2, //交易方向，1-买，2-卖 \"order_type\":2, //订单类型，2-限价单 \"price\":\"0.00886500\", //成交价格 \"amount\":\"1.00000000\", //成交量 \"money\":\"0.00886500\", //成交额，单位是定价币种 \"relay_id\":\"123345677775423\", //关联订单id \"fee\":0 //手续费 } } }] 合约订阅 Kline 数据 channel: biboxsub_spot$pairkline$period (例如 bibox_sub_spot_4BTC_USDT_kline_1min) 参考 订阅 Kline 数据 合约的pair参数： BTCUSDT永续 = 4BTC_USDT、ETHUSDT永续 = 4ETH_USDT、以此类推 data 说明 \"data\": { \"time\": k线某周期开始时间, \"count\": 成交笔数, \"open\": 开盘价, \"high\": 最高价, \"low\": 最低价, \"close\": 收盘价 \"vol\": 成交量(合约张数) } 合约订阅 Market 数据 channel: bibox_sub_spot_ALL_ALL_market 参考 订阅 Market 数据 data 说明 { \"id\": 交易对id \"coin_symbol\": 交易币种 如：4BTC、4ETH... \"currency_symbol\": 定价币种 \"last\": 24h最新价 \"high\": 24h最高价 \"low\": 24h最低价 \"change\": 24h涨跌 \"percent\": 24h涨跌幅 \"vol24H\": 24h成交量(张数) \"amount\": 24h成交额(USDT) \"last_cny\": 最新价折算cny \"high_cny\": 最高价折算cny \"low_cny\": 最低价折算cny \"last_usd\": 最新价折算usd \"high_usd\": 最高价折算usd \"low_usd\": 最低价折算usd } 合约订阅 Depth 数据 channel: biboxsub_spot$pair_depth (例：bibox_sub_spot_4BTC_USDT_depth) 参考 订阅 Depth 数据 合约的pair参数： BTCUSDT永续 = 4BTC_USDT、ETHUSDT永续 = 4ETH_USDT、以此类推 data说明 \"bids\": 买方深度列表 \"asks\": 卖方深度列表 { \"price\": 委托价格, \"volume\": 委托数量(张) } 合约订阅 Deals 数据 channel: biboxsub_spot$pair_deals (例：bibox_sub_spot_4BTC_USDT_deals) 参考 订阅 Deals 数据 合约的pair参数： BTCUSDT永续 = 4BTC_USDT、ETHUSDT永续 = 4ETH_USDT、以此类推 data说明 { \"id\": 成交历史id, \"pair\": 交易对, 如：4BTC_USDT、4ETH_USDT... \"price\": 成交均价, \"amount\": 成交数量, \"time\": 成交时间戳, \"side\": 成交方向，1-开多，2-开空 } 合约订阅 Ticker 数据 biboxsub_spot$pair_ticker (例：bibox_sub_spot_4BTC_USDT_ticker) 参考 订阅 Ticker 数据 合约的pair参数： BTCUSDT永续 = 4BTC_USDT、ETHUSDT永续 = 4ETH_USDT、以此类推 data说明 \"data\":{ \"pair\": 交易对 \"last\": 最新成交价 \"last_cny\": 最新成交价，cny计价 \"last_usd\": 最新成交价，usd计价 \"high\": 24h最高价 \"low\": 24h最低价 \"buy\": 最新买一价 \"buy_amount\": 买一量(张) \"sell\": 最新卖一价 \"sell_amount\": 卖一量(张) \"vol\": 24h成交量(张) \"percent\": 24h涨跌幅 \"timestamp\": 时间戳 \"base_last_cny\": 最新成交价，cny计价（保留8位小数） } 合约订阅 Login 数据 bibox_sub_spot_ALL_ALL_login 参考 订阅 Login 数据 返回数据例子 合约资产 contract_assets [ { \"channel\":\"bibox_sub_spot_ALL_ALL_login\", \"binary\":\"0\", \"data_type\":1, \"data\":{ \"contract_assets\":{ \"user_id\":10101010, \"coin_symbol\":\"USDT\", \"balance\":\"99.1823\", // 可用余额 \"freeze\":\"0.7899\", // 冻结金额 \"profit\":\"-3.6816\", \"margin\":\"0.7899\", // 冻结保证金 \"imargin\":\"0.0000\" // 挂单冻结资金 } } } ] 合约持仓 contract_order [ { \"channel\":\"bibox_sub_spot_ALL_ALL_login\", \"binary\":\"0\", \"data_type\":1, \"data\":{ \"contract_order\":{ \"user_id\":10101010, \"coin_symbol\":\"USDT\", \"pair\":\"4BTC_USDT\", // 合约符号 \"order_side\":2, // 持仓方向，1开多，2开空 \"price\":\"3949.7850\", // 开仓均价 \"price_up\":\"4009.0200\", // 挂单开多均价 \"price_down\":\"3946.0300\", // 挂单开空均价 \"fee_rate\":\"0.0000\", \"contract\":2, // 持仓张数 \"margin\":\"1.5799\", // 保证金 \"imargin\":\"0.0000\", // 挂单占用资金 \"icontract_up\":1, // 委托开多未成交张数 \"icontract_down\":0, // 委托开空未成交张数 \"leverage\":\"50\", // 杠杆倍数，0代表全仓 \"price_force\":\"4009.0318\", // 爆仓价格 \"price_alert\":\"3989.2829\", // 爆仓告警价格 \"profit\":\"-3.5492\" } } } ] 合约委托单 contract_pending [ { \"channel\":\"bibox_sub_spot_ALL_ALL_login\", \"binary\":\"0\", \"data_type\":1, \"data\":{ \"contract_pending\":{ \"id\":\"628754\", // 委托订单号 \"user_id\":10101010, \"coin_symbol\":\"USDT\", \"pair\":\"4BTC_USDT\", // 合约符号 \"order_side\":1, // 1开多，2开空 \"order_type\":1, \"price\":\"4009.0200\", // 挂单价格 \"contract\":1, // 挂单张数 \"fee_rate_maker\":\"0.0000\", \"fee_rate_taker\":\"0.0000\", \"order_from\":1, \"status\":3, // 0,1未成交 2部分成交 3完全成交 4部分取消 5完全取消 6,7 系统取消, >=100 下单失败 \"price_deal\":\"3952.5600\", // 成交均价 \"contract_deal\":1, // 已成交张数 \"deal_count\":1, \"createdAt\":1550671734000, // 下单时间 \"updatedAt\":1550671734000 } } } ] 成交记录 contract_detail [ { \"channel\":\"bibox_sub_spot_ALL_ALL_login\", \"binary\":\"0\", \"data_type\":1, \"data\":{ \"contract_detail\":{ \"order_id\":\"628754\", // 委托订单号 \"user_id\":10101010, \"coin_symbol\":\"USDT\", \"pair\":\"4BTC_USDT\", // 合约符号 \"order_side\":1, // 1开多，2开空 \"order_type\":1, // 1市价，2限价 \"order_from\":1, \"contract\":1, // 成交张数 \"price\":\"4009.0200\", // 开仓价 \"price_deal\":\"3952.5600\", // 成交价 \"fee\":\"0.0000\", // 手续费 \"is_maker\":0, // 是否是maker \"is_cancel\":0, // 是否是撤销单 \"is_persist\":0, \"force_sub\":0, \"createdAt\":1550671735000, // 生成时间 \"updatedAt\":1550671735000 } } } ] 仓位变化记录 contract_deal_log { \"channel\":\"bibox_sub_spot_ALL_ALL_login\", \"binary\":\"0\", \"data_type\":1, \"data\":{ \"contract_deal_log\":{ \"id\":\"1125899906842966183\", \"user_id\":10040000, \"type\":\"1\", // 1开仓，2平仓，3爆仓，4减仓 \"pair\":\"4ETH_USDT\", \"coin_symbol\":\"USDT\", \"price_open\":\"182.2091272149\", // 开仓均价 \"price\":\"181.1900\", // 挂单价格 \"price_deal\":\"181.1900\", // 成交价格 \"contract\":\"1\", // 成交张数，可能为负 \"profit\":\"0\", // 收益 \"fee\":\"0.0011\", // 手续费 \"order_side\":1, // 方向 \"createdAt\":1572855008209, \"updatedAt\":1572855008209 } } } 订阅指数 channel: bibox_sub_spot_ALL_ALL_indexMarket 成功建立和 WebSocket API 的连接之后，向 Server 发送如下格式的数据来订阅数据 { \"event\":\"addChannel\", \"channel\":\"bibox_sub_spot_ALL_ALL_indexMarket\", \"binary\":1 } 正确订阅 { \"event\":\"addChannel\", \"channel\":\"bibox_sub_spot_ALL_ALL_indexMarket\", \"binary\":1 } 订阅成功返回数据的例子 [ { \"id\":147, \"is_hide\":0, \"pair_type\":0, \"area_id\":15, \"coin_symbol\":\"ETH\", \"currency_symbol\":\"USDT\", \"last\":\"147.1849\", \"high\":\"148.3986\", \"low\":\"140.4113\", \"change\":\"-0.5364\", \"percent\":\"-0.36%\", \"vol24H\":\"43108\", \"amount\":\"6240970.83\", \"last_cny\":\"989.4382\", \"base_last_cny\":\"\", \"high_cny\":\"997.5971\", \"low_cny\":\"943.9036\", \"last_usd\":\"147.1848\", \"high_usd\":\"148.3985\", \"low_usd\":\"140.4113\" }, { \"id\":146, \"is_hide\":0, \"pair_type\":0, \"area_id\":15, \"coin_symbol\":\"BTC\", \"currency_symbol\":\"USDT\", \"last\":\"3955.1652\", \"high\":\"3993.1069\", \"low\":\"3880.6072\", \"change\":\"+6.1701\", \"percent\":\"+0.16%\", \"vol24H\":\"43109\", \"amount\":\"169654088.16\", \"last_cny\":\"26588.2733\", \"base_last_cny\":\"\", \"high_cny\":\"26843.3333\", \"low_cny\":\"26087.0635\", \"last_usd\":\"3955.1651\", \"high_usd\":\"3993.1068\", \"low_usd\":\"3880.6072\" } ] data 说明 { \"id\":147, \"is_hide\":0, \"pair_type\":0, \"area_id\":15, \"coin_symbol\":\"ETH\", // 币种符号 \"currency_symbol\":\"USDT\", // 计价货币，USDTFUND代表溢价指数 \"last\":\"147.1867\", // 最新价格 \"high\":\"148.3986\", \"low\":\"140.4113\", \"change\":\"-0.5346\", \"percent\":\"-0.36%\", \"vol24H\":\"43109\", \"amount\":\"6241118.04\", \"last_cny\":\"989.4508\", \"base_last_cny\":\"\", \"high_cny\":\"997.5971\", \"low_cny\":\"943.9036\", \"last_usd\":\"147.1867\", \"high_usd\":\"148.3985\", \"low_usd\":\"140.4113\" } 之后每当指数有更新时，client 会收到数据，例子 { \"id\":147, \"is_hide\":0, \"pair_type\":0, \"area_id\":15, \"coin_symbol\":\"ETH\", \"currency_symbol\":\"USDT\", \"last\":\"147.1867\", \"high\":\"148.3986\", \"low\":\"140.4113\", \"change\":\"-0.5346\", \"percent\":\"-0.36%\", \"vol24H\":\"43109\", \"amount\":\"6241118.04\", \"last_cny\":\"989.4508\", \"base_last_cny\":\"\", \"high_cny\":\"997.5971\", \"low_cny\":\"943.9036\", \"last_usd\":\"147.1867\", \"high_usd\":\"148.3985\", \"low_usd\":\"140.4113\" } 订阅合约下单价格限制 channel: bibox_sub_spot_ALL_ALL_contractPriceLimit 成功建立和 WebSocket API 的连接之后，向 Server 发送如下格式的数据来订阅数据 { \"event\":\"addChannel\", \"channel\":\"bibox_sub_spot_ALL_ALL_contractPriceLimit\", \"binary\":1 } 正确订阅 { \"event\":\"addChannel\", \"channel\":\"bibox_sub_spot_ALL_ALL_contractPriceLimit\", \"binary\":1 } 订阅成功返回数据的例子 { \"4BTC_USDT\":{ \"min_up\":\"2964.4562\", \"max_up\":\"4090.9496\", \"min_down\":\"3814.2670\", \"max_down\":\"4940.7603\", \"market_up\":\"4090.9496\", \"market_down\":\"3814.2670\" }, \"4ETH_USDT\":{ \"min_up\":\"110.3038\", \"max_up\":\"155.1606\", \"min_down\":\"138.9828\", \"max_down\":\"183.8396\", \"market_up\":\"155.1606\", \"market_down\":\"138.9828\" } } data 说明 { \"4BTC_USDT\":{ // 合约符号 \"min_up\":\"2964.4562\", // 开多最小价格 \"max_up\":\"4090.9496\", // 开多最大价格 \"min_down\":\"3814.2670\", // 开空最小价格 \"max_down\":\"4940.7603\", // 开空最大价格 \"market_up\":\"4090.9496\", // 市价开多最大价格 \"market_down\":\"3814.2670\" // 市价开空最小价格 } } 之后每当下单价格限制有更新时，client 会收到数据，例子 { \"4BTC_USDT\":{ \"min_up\":\"2964.4562\", \"max_up\":\"4090.9496\", \"min_down\":\"3814.2670\", \"max_down\":\"4940.7603\", \"market_up\":\"4090.9496\", \"market_down\":\"3814.2670\" }, \"4ETH_USDT\":{ \"min_up\":\"110.3038\", \"max_up\":\"155.1606\", \"min_down\":\"138.9828\", \"max_down\":\"183.8396\", \"market_up\":\"155.1606\", \"market_down\":\"138.9828\" } } Copyright © bibox.com 2019 all right reserved，powered by GitbookUpdate Date: 2019-11-19 "},"error_code.html":{"url":"error_code.html","title":"错误码","keywords":"","body":"错误码 错误码 描述 2003 Cookie 失效 2033 操作失败！订单已完成或已撤销 2034 操作失败！请检查参数是否正确 2040 操作失败！没有该订单 2064 订单撤销中，不能再次撤销 2065 委托价格设置过高，请重新设置价格 2066 委托价格设置过低，请重新设置价格 2067 暂不支持市价单 2068 下单数量不能低于0.0001 2069 市价单无法撤销 2078 下单价格非法 2085 币种最小下单数量限制 2086 账户资产异常,限制下单 2091 请求过于频繁，请稍后再试 2092 币种最小下单金额限制 3000 请求参数错误 3002 参数不能为空 3009 推送订阅channel不合法 3010 websocket连接异常 3011 接口不支持apikey请求方式 3012 apikey无效 3016 交易对错误 3017 推送订阅event不合法 3024 apikey权限不足 3025 apikey签名验证失败 3026 apikey ip受限制 3027 账户没有apikey 3028 账户apikey数量超过了限制数量 3029 apikey允许ip数量超过了限制数量 3033 查询类请求限制一个cmd 3034 最大cmd个数限制 3035 cmd请求个数限制 4000 当前网络连接不稳定，请稍候重试 4003 服务器繁忙，请稍后再试 Copyright © bibox.com 2019 all right reserved，powered by GitbookUpdate Date: 2019-11-13 "}}